


_______________



_______________



_______________



_______________

-- поиск вхождения без учета регистра
select * from products where lower(name) like '%газ%'

_______________

-- пользователи, совершившие более 12 действий
select user_id, count(*)
from user_actions
group by user_id
having count(*) > 12

_______________

/*
изучение лефтджойна
все возможные варианты в левой и правой таблице: есть  пара для соединения * проходит ли строка фильтрацию
id_L	key_L	data_L	param_L
1	    pair	a0	    0
2	    pair	a1	    1
3	    pair	a2	    1
4	    aloneL	b	    1
5	    filteredL	c	0

id_R	key_R	data_R	param_R
1	    pair	d0	    0
2	    pair	d1	    1
3	    pair	d2	    1
4	    aloneR	e	    1
5	    filteredR	f	0
*/

WITH
    L AS (
        SELECT 1 AS id_L, 'pair' AS key_L, 'a0' AS data_L, 0 AS param_L UNION
        SELECT 2, 'pair', 'a1', 1 UNION
        SELECT 3, 'pair', 'a2', 1 UNION
        SELECT 4, 'aloneL', 'b', 1 UNION
        SELECT 5, 'filteredL', 'c', 0
    ),

    R AS (
        SELECT 1 AS id_R, 'pair' AS key_R, 'd0' AS data_R, 0 AS param_R UNION
        SELECT 2, 'pair', 'd1', 1 UNION
        SELECT 3, 'pair', 'd2', 1 UNION
        SELECT 4, 'aloneR', 'e', 1 UNION
        SELECT 5, 'filteredR', 'f', 0
    )

SELECT
    *
FROM
    L
    LEFT JOIN R
        ON
            key_L = key_R
            AND param_L = 1
            AND param_R = 1
ORDER BY
    data_L,
    data_R

_______________

-- частоты встречающихся интервалов между покупками
WITH time_series AS (
    SELECT
        user_id,
        order_date - LAG(order_date) OVER (PARTITION BY user_id ORDER BY order_date) AS sale_interval
    FROM
        sales
)
SELECT
    sale_interval, 
    COUNT(*) cnt
FROM
    time_series
WHERE
    sale_interval IS NOT NULL
GROUP BY
    sale_interval
ORDER BY
    sale_interval

_______________

SELECT
    product_name,
    category_name,
    SUM(quantity * (price - cost)) profit
FROM
    orders o
    INNER JOIN prices AS prc USING(product_id)
    INNER JOIN costs cst USING(product_id)
    INNER JOIN products prd USING(product_id)
    INNER JOIN categories ctg USING(category_id)
GROUP BY
    product_name,
    category_name
ORDER BY
    profit DESC

_______________

with
    Customers as (
      SELECT 1 as CustomerID, 'a' as chr UNION
      SELECT 1, 'b' UNION
      SELECT 2, 'a' UNION
      SELECT 2, 'b' UNION
      SELECT 3, 'a' UNION
      SELECT 3, 'b'  UNION
      SELECT 4, 'a'
    ),

    Orders as (
      SELECT 1 as CustomerID, '20090515' as OrderDate UNION
      SELECT 1, '20090516' UNION
      SELECT 2, '20090515' UNION
      SELECT 2, '20090516' UNION
      SELECT 3, '20090515' UNION
      SELECT 3, '20090516'
    )


SELECT *
FROM Customers AS CUS
LEFT JOIN Orders AS ORD
ON CUS.CustomerID = ORD.CustomerID
AND OrderDate >'20090515'
-- AND chr > 'a'
-- WHERE OrderDate >'20090515'

_______________

with
    a as (
      SELECT 1 as id, 'a' as chr UNION
      SELECT 1, 'b' UNION
      SELECT 2, 'a' UNION
      SELECT 2, 'b' UNION
      SELECT 3, 'a' UNION
      SELECT 3, 'b'
    ),

    b as (
      SELECT 1 as id, 1 as value UNION
      SELECT 1, 11 UNION
      SELECT 2, 1 UNION
      SELECT 2, 11 UNION
      SELECT 3, 1 UNION
      SELECT 3, 11
    )


SELECT
    *
FROM
    a
    LEFT JOIN b ON a.id = b.id and b.value > 10
    -- LEFT JOIN b ON a.id = b.id and a.chr > 'a'
-- WHERE
--    b.value > 10


_______________

-- условие в on и where
WITH
    splited_orders AS(
        SELECT
            order_id,
            creation_time,
            UNNEST (product_ids) product_id
        FROM
            orders
        WHERE
            NOT EXISTS (SELECT *
                        FROM user_actions
                        WHERE action = 'cancel_order'
                                AND orders.order_id = user_actions.order_id)
    )


SELECT
    *
FROM
    splited_orders so
    LEFT JOIN products p
        ON so.product_id = p.product_id
            and price < 100
WHERE
    order_id < 8

EXCEPT

SELECT
    *
FROM
    splited_orders so
    LEFT JOIN products p
        ON so.product_id = p.product_id
WHERE
    order_id < 8
    and price < 100

_______________

-- кубик по континентам и субконтинента
SELECT
  geoNetwork.continent,
  geoNetwork.subContinent,
  COUNT(*) cnt
FROM
  `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
GROUP BY
  CUBE (1, 2)
ORDER BY
  cnt desc
LIMIT
  10

_______________

SELECT
    timestamp_seconds(1800000000)
-- будет 2027-01-15 08:00:00 UTC

_______________

-- создание времени из int64: 1501591568
SELECT
    timestamp_seconds(visitStartTime)
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
LIMIT
  10

_______________

-- создание даты из стринга типа "20170801"
SELECT
    DATE(LEFT(date, 4) || '-' || SUBSTRING(date, 5, 2) || '-' || RIGHT(date, 2))
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
LIMIT
  10

_______________

-- кумулятивная сумма продаж за один час
SELECT
    sale_time,
    SUM(money) OVER (
        ORDER BY sale_time
        RANGE BETWEEN INTERVAL '1' HOUR PRECEDING AND CURRENT ROW
    ) AS rolling_sum_last_hour
FROM
    final_project_check

_______________

SELECT
    country_code,
    status,
    COUNT(*)
FROM
    merchants
GROUP BY CUBE (
    country_code,
    status
)
вернет все сочетания кодов и статусов, а так же итоги по всем кодам, по всем статусам и общий итого по таблице

GROUP BY GROUPING SETS(
    country_code,
    status
)
вернет только итоги по всем кодам и по всем статусам

GROUP BY ROLLUP(
    country_code,
    status
)
вернет только все итоги для сочетаний, «убирая» поля с конца, т.е. для код-статусов, для кодов и общий итог (не выводя строчек для итогов по статусам)

_______________

Для тренировки таблички, чтобы не объявлять их явно, можно создавать в виде CTEшек:
with checks as (
  SELECT 1 as id_check, '2025-01-10 09:32:17' as check_date UNION
  SELECT 1, '2025-01-10 09:32:17' UNION
  SELECT 1, '2025-01-10 09:32:17'
)
SELECT
  id_check,
  TIME(check_date)
FROM
  checks

_______________

-- pivot table пол * действие * количество
SELECT
    sex,
    COUNT(action) FILTER (WHERE action = 'create_order') create_number,
    COUNT(action) FILTER (WHERE action = 'cancel_order') cancel_number
FROM
    user_actions
    INNER JOIN users USING(user_id)
GROUP BY
    sex

_______________

-- unpivot таблицу пол * действие * количество
SELECT sex, 'create_order' AS action, create_number FROM wide_table
UNION
SELECT sex, 'cancel_order'          , cancel_number FROM wide_table
