https://lab.karpov.courses/learning/152/
КУРС «СИМУЛЯТОР SQL» от Карпов коурсес

-- до стр 40 включительно

/*
Можно попробовать поискать подсказку поиском на форуме.
К сожалению, единообразия в обозначении задач форумчане не достигли.
Плюс курс живет и изменяется, добавляются/удаляются задачи - нумерация едет.
А когда-то девятый и десятый урок сделали рокировку.

Дата в условиях пишется в формате 'гггг-мм-дд'.
<= '2022-09-01' значит <= '2022-09-01 00:00:00.0...'
И действия, совершенные 1 сентября, не попадут в отчет.

PostgreSQL имеет строгую типизацию: 7 / 3 = 2.
Если нужны доли, то преобразуем тип в decimal: 7::decimal / 3.
(float, например, округлять до второй цифры после запятой нельзя).
Или тупо умножаем в начале на 1.0:  1.0 * 7 / 3.

Текст только в одинарных кавычках.
В двойных кавычках только названия таблиц и колонок.

Для замены NULLов есть COALESCE.
COALESCE("что хотим поставить", "что поставить если попался NULL")

Вложенные функции выполняются изнутри наружу third(second(first())).
Можно писать их изнутри наружу

DISTINCT ставится в начале SELECTа и действует на все поля.
Т.е. DISTINCT a, b, c найдет не уникальные a, а уникальные сочетания a, b и c.

Новую колонку, созданную в SELECT, мы можем использовать в ORDER BY и GROUP BY,
но **не** можем в WHERE и HAVING.

У вас дата отображается не так, как в ожидаемом результате?
Или у вас отображаются две цифры после запятой вместо заданных в ROUND трех?
Редаш своеволен в отображении информации. Так что, возможно, все в порядке.
Пересмотрите https://lab.karpov.courses/learning/152/module/1762/lesson/18484/53200/269826/

Путаем таблицы user_actions и courier_actions в запросах.

При расчете одних показателей надо отсекать отмененные заказы,
а при расчете других - нет. Подзапросы/CTE и FILTER нам в помощь.

Значения, встречающиеся в таблицах: accept_order, deliver_order, create_order, cancel_order.
А мы пытаемся отфильтровать какие-то мифические canceled_order, canceled...

Каждый исполненный заказ имеет 2 строки в courier_actions: accept_order и deliver_order.
Каждый отмененный заказ имеет 2 строки в user_actions: create_order и cancel_order.
Не забываем об этом при фильтрациях.
action != 'cancel_order' может быть не достаточно.

Среднее можно считать по разному.
Например, заказы Винни - [10, 20, 30] рублей, Пятачка  - [40, 50].
1-й вариант - среднее "скопом": (10 + 20 + 30 + 40 + 50) / 5 = 30.
2-й вариант - среднее поюзерных средних: { (10 + 20 + 30) / 3 + (40 + 50) / 2 } / 2 = {20 + 45} / 2 = 32.5.
Следуем инструкциям в каждой конкретной задаче.
*/

/*
Часть 2

"Новыми будем считать тех пользователей, которые в данный день совершили
своё первое действие в нашем сервисе". Не обязательно "результативное" действие!
Соответственно не надо отфильтровывать отмененные заказы.
А покупатель тот, кто совершил не абы какой заказ, а неотмененный.
Пусть и доставленный уже на следующий день. Фильтр приветствуется.

Юзер в одни сутки может совершить несколько действий.
DISTINCTим это по необходимости.

Помним, что есть заказы, сделанные 1-го, а доставленные уже 2-го.
*/

3.1
select
  product_id,
  name,
  price
from
  products


3.2
select
  product_id,
  name,
  price
from
  products
order by
  name


3.3
select
  courier_id,
  order_id,
  action,
  time
from
  courier_actions
order by
  courier_id,
  action,
  time desc
limit
  1000


3.4
select
  name,
  price
from
  products
order by
  price desc
limit
  5


3.5
select
  name product_name,
  price product_price
from
  products
order by
  price desc
limit
  5


3.6
SELECT
  name,
  LENGTH(name) name_length,
  price
FROM
  products
ORDER BY
  name_length DESC
LIMIT
  1


3.7
SELECT
  name,
  UPPER(SPLIT_PART(name, ' ', 1)) first_word,
  price
FROM
  products
ORDER BY
  name


3.8
select
  name,
  price,
  price::VARCHAR price_char
from
  products
order by
  name


3.9
select
  concat('Заказ № ', order_id, ' создан ', creation_time::date) AS order_info
from
  orders
limit
  200


3.10
select
  courier_id,
  date_part('year', birth_date) birth_year
from
  couriers
order by
  birth_year desc,
  courier_id


3.11
select
  courier_id,
  coalesce(
    date_part('year', birth_date) :: varchar,
    'unknown'
  ) birth_year
from
  couriers
order by
  birth_year desc,
  courier_id


3.12
select
  product_id,
  name,
  price old_price,
  1.05 * price new_price
from
  products
order by
  new_price desc,
  product_id


3.13
select
  product_id,
  name,
  price old_price,
  ROUND(1.05 * price, 1) new_price
from
  products
order by
  new_price desc,
  product_id


3.14
select
  product_id,
  name,
  price old_price,
  case
    when name != 'икра' and price > 100 then 1.05 * price
    else price
  end AS new_price
from
  products
order by
  new_price desc,
  product_id


3.15
select
  product_id,
  name,
  price,
  round(price / 120 * 20, 2) tax,
  round(price - price / 120 * 20, 2) price_before_tax
from
  products
order by
  price_before_tax desc,
  product_id

------------------

4.1
select
  product_id,
  name,
  price
from
  products
where
  price <= 100
order by
  price desc


4.2
select product_id, name
from products
where name LIKE '%чай%'


4.2new
select user_id
from users
where sex = 'female'
order by user_id
limit 1000


4.3
select product_id, name
from products
where name LIKE 'с%' and name not LIKE '% %'


4.3new
select user_id, order_id, time
from user_actions
where time > '2022-09-06' and action='create_order'
order by order_id


4.4
select
  product_id,
  name,
  price,
  '25%' discount,
  0.75 * price price_discounted
from
  products
where
  name LIKE '%чай%'
  and name not LIKE '%чай%гриб%'
  and price > 60


4.4new
select
  product_id,
  name,
  price old_price,
  0.8 * price new_price
from
  products
where
  0.8 * price > 100
order by
  product_id


4.5
select
  user_id,
  order_id,
  action,
  time
from
  user_actions
where
  user_id in (170, 200, 230)
  and time between '2022-08-25' and '2022-09-05'
order by
  time desc


4.5new
select
  product_id,
  name
from
  products
where
  SPLIT_PART(name, ' ', 1) = 'чай'
  or LENGTH(name) = 5


4.6
select courier_id, birth_date, sex
from couriers
where birth_date is null
order by courier_id


4.7
select user_id, birth_date
from users
where birth_date is not null and sex = 'male'
order by birth_date desc
limit 50


4.8
select order_id, time
from courier_actions
where courier_id = 100 and action = 'deliver_order'
order by time desc
limit 10


4.9
select
  order_id
from
  user_actions
where
  DATE_PART('year', time) = '2022'
  and DATE_PART('month', time) = '08'
  and action = 'create_order'


4.10
select
  courier_id
from
  couriers
where
  DATE_PART('year', birth_date) between 1990 and 1995


4.11
SELECT user_id,
       order_id,
       action,
       time
FROM   user_actions
WHERE  action = 'cancel_order'
       AND time between '2022/08/01' and '2022/09/01'
       AND date_part('dow', time) = 3
       AND date_part('hour', time) BETWEEN 12 AND 15
ORDER BY time desc


4.12
select
    product_id,
    name,
    price,
    round(
        case
            when name in (
                'сахар', 'сухарики', 'сушки', 'семечки',
                'масло льняное', 'виноград', 'масло оливковое',
                'арбуз', 'батон', 'йогурт', 'сливки', 'гречка',
                'овсянка', 'макароны', 'баранина', 'апельсины',
                'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая',
                'мука', 'шпроты', 'сосиски', 'свинина', 'рис',
                'масло кунжутное', 'сгущенка', 'ананас', 'говядина',
                'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки',
                'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины')
            then price / 11
            else price / 6
        end
    , 2) as tax,
  price - round(
                case
                    when name in (
                        'сахар', 'сухарики', 'сушки', 'семечки',
                        'масло льняное', 'виноград', 'масло оливковое',
                        'арбуз', 'батон', 'йогурт', 'сливки', 'гречка',
                        'овсянка', 'макароны', 'баранина', 'апельсины',
                        'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая',
                        'мука', 'шпроты', 'сосиски', 'свинина', 'рис',
                        'масло кунжутное', 'сгущенка', 'ананас', 'говядина',
                        'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки',
                        'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли', 'мандарины')
                    then price / 11
                    else price / 6
                end
            , 2) as price_before_tax
from
  products
order by
  price_before_tax desc
___________________________________

5.1
select
  DISTINCT user_id
from
  user_actions
order by
  user_id


5.2
select
  DISTINCT courier_id, order_id
from
  courier_actions
order by
  courier_id, order_id


5.3
select
  max(price) max_price, min(price) min_price
from
  products


5.4
SELECT
  COUNT(*) dates,
  COUNT(birth_date) dates_not_null
FROM
  users


5.5
SELECT
  COUNT(user_id) users,
  COUNT(DISTINCT user_id) unique_users
FROM
  user_actions


5.6
select count(courier_id) couriers
from couriers
where sex = 'female'


5.7
SELECT
  min(time) as first_delivery,
  max(time) as last_delivery
FROM
  courier_actions
WHERE
  action = 'deliver_order'


5.8
SELECT
  SUM(price) order_price
FROM
  products
WHERE
  name = 'сухарики'
  OR name = 'чипсы'
  OR name = 'энергетический напиток'


5.9
SELECT
  COUNT(product_ids) orders
FROM
  orders
WHERE
  array_length(product_ids, 1) >= 9


5.10
SELECT
  MIN(AGE(birth_date))::VARCHAR min_age
FROM
  couriers
WHERE
  sex = 'male'


5.11
SELECT
  SUM(
    CASE
      WHEN name = 'сухарики' THEN price * 3
      WHEN name = 'чипсы' THEN price * 2
      WHEN name = 'энергетический напиток' THEN price * 1
    END
  ) order_price
FROM
  products


5.12
/*
кроме `иван-чай`, например, в названии может быть что-то еще
*/
SELECT
  ROUND(AVG(price), 2) avg_price
FROM
  products
WHERE
  (name LIKE '%чай%'
  OR name LIKE '%кофе%')
  AND name NOT LIKE '%чайный гриб%'
  AND name NOT LIKE '%иван-чай%'


5.13
SELECT
  (AGE(MAX(birth_date), MIN(birth_date)))::VARCHAR age_diff
FROM
  users
WHERE
  sex = 'male'


5.14
/*
У этих буржуев начальный день недели - воскресенье.
А странные программисты считать начинают почему-то с нуля.
*/
SELECT
  ROUND(AVG(ARRAY_LENGTH(product_ids, 1)), 2) avg_order_size
FROM
  orders
WHERE
  EXTRACT(DOW from creation_time) IN (0, 6)


5.15
select
  COUNT(DISTINCT user_id) unique_users,
  COUNT(DISTINCT order_id) unique_orders,
  ROUND(COUNT(DISTINCT order_id)::DECIMAL / COUNT(DISTINCT user_id), 2) orders_per_user
from
  user_actions


5.16
SELECT
  COUNT(DISTINCT user_id) - COUNT(DISTINCT user_id) FILTER (WHERE action = 'cancel_order') users_count
FROM
  user_actions


5.17
SELECT
  COUNT(DISTINCT order_id) orders,
  COUNT(DISTINCT order_id) FILTER(WHERE ARRAY_LENGTH(product_ids, 1) >= 5) large_orders,
  ROUND(1.0 * COUNT(DISTINCT order_id) FILTER(WHERE ARRAY_LENGTH(product_ids, 1) >= 5) / COUNT(DISTINCT order_id), 2) large_orders_share
FROM
  orders

------------------------------------------

6.1
SELECT sex, COUNT(*) couriers_count
FROM couriers
GROUP BY sex
ORDER BY couriers_count


6.2
SELECT action, COUNT(*) orders_count
FROM user_actions
GROUP BY action


6.3
SELECT DATE_TRUNC('month', creation_time) as month, COUNT(*) as orders_count
FROM orders
GROUP BY 1
ORDER BY 1


6.4
SELECT DATE_TRUNC('month', time) as month, action, COUNT(*) orders_count
FROM user_actions
GROUP BY 1, 2
ORDER BY 1, 2


6.5
SELECT sex, MAX(DATE_PART('month', birth_date))::INTEGER max_month
FROM users
GROUP BY sex
ORDER BY sex


6.6
SELECT sex, DATE_PART('month', MAX(birth_date))::INTEGER max_month
FROM users
GROUP BY sex
ORDER BY sex


6.7
/*
MAX(birth_date) выдаст самого молодого.
*/
SELECT sex, MAX(DATE_PART('year', AGE(birth_date)))::INTEGER max_age
FROM users
GROUP BY sex
ORDER BY max_age


6.8
SELECT DATE_PART('year', AGE(birth_date))::INTEGER age, COUNT(*) users_count
FROM users
GROUP BY age
ORDER BY age


6.9
SELECT DATE_PART('year', AGE(birth_date))::INTEGER age, sex, COUNT(*) users_count
FROM users
WHERE birth_date IS NOT NULL
GROUP BY age, sex
ORDER BY age, sex


*6.5
SELECT DATE_TRUNC('month', time) AS month, action, COUNT(*) orders_count
FROM user_actions
GROUP BY month, action
ORDER BY month, action


6.10
SELECT array_length(product_ids, 1) order_size, COUNT(*) orders_count
FROM orders
WHERE creation_time BETWEEN '2022-08-29' AND '2022-09-05'
GROUP BY order_size
ORDER BY order_size


6.11
SELECT array_length(product_ids, 1) order_size, COUNT(*) orders_count
FROM orders
WHERE EXTRACT(DOW from creation_time) NOT IN (0, 6)
GROUP BY order_size
HAVING COUNT(*) > 2000
ORDER BY order_size


6.12
SELECT user_id, COUNT(order_id) created_orders
FROM user_actions
WHERE action = 'create_order' AND DATE_PART('month', time) = 8
GROUP BY user_id
ORDER BY created_orders DESC, user_id
LIMIT 5


6.13
SELECT courier_id
FROM courier_actions
WHERE action = 'deliver_order' AND DATE_PART('month', time) = 9
GROUP BY courier_id
HAVING COUNT(order_id) = 1
ORDER BY courier_id


6.14
SELECT user_id
FROM user_actions
WHERE action = 'create_order'
GROUP BY user_id
HAVING MAX(time) < '2022-09-08'
ORDER BY user_id


6.15
SELECT
  CASE
    WHEN array_length(product_ids, 1) < 4 THEN 'Малый'
    WHEN array_length(product_ids, 1) > 6 THEN 'Большой'
    ELSE 'Средний'
    END as order_size,
  COUNT(*) orders_count
FROM
  orders
GROUP BY
  order_size
ORDER BY
  order_size


6.16
/*
"Ваши расчеты могут отличаться от ожидаемого результата,
так как время не стоит на месте".
*/
SELECT
  CASE
    WHEN DATE_PART('YEAR', AGE(birth_date)) BETWEEN 19 AND 24 THEN '19-24'
    WHEN DATE_PART('YEAR', AGE(birth_date)) BETWEEN 25 AND 29 THEN '25-29'
    WHEN DATE_PART('YEAR', AGE(birth_date)) BETWEEN 30 AND 35 THEN '30-35'
    WHEN DATE_PART('YEAR', AGE(birth_date)) BETWEEN 36 AND 41 THEN '36-41'
  END AS group_age,
  COUNT(user_id) users_count
FROM
  users
WHERE
  DATE_PART('YEAR', AGE(birth_date)) BETWEEN 19 AND 41
GROUP BY
  group_age
ORDER BY
  group_age


6.17
SELECT
  CASE
    WHEN EXTRACT(DOW from creation_time) IN (0, 6) THEN 'weekend'
    ELSE 'weekdays'
    END week_part,
  ROUND(AVG(array_length(product_ids, 1)), 2) avg_order_size
FROM
  orders
GROUP BY
  week_part
ORDER BY
  avg_order_size


6.18
SELECT
  user_id,
  COUNT(*) FILTER (WHERE action = 'create_order') orders_count ,
  ROUND(
      COUNT(*) FILTER (WHERE action = 'cancel_order')
          / CAST(COUNT(DISTINCT order_id) AS DECIMAL)
  , 2) AS cancel_rate
FROM
  user_actions
GROUP BY
  user_id
HAVING
  COUNT(*) FILTER (WHERE action = 'create_order') > 3
  AND COUNT(*) FILTER (WHERE action = 'cancel_order') / CAST(COUNT(DISTINCT order_id) AS DECIMAL) >= 0.5
ORDER BY
  user_id


6.19
SELECT
  DATE_PART('isodow', time)::INT weekday_number,
  TO_CHAR(time, 'Dy') weekday,
  COUNT(DISTINCT order_id) FILTER(WHERE action = 'create_order') created_orders,
  COUNT(DISTINCT order_id) FILTER(WHERE action = 'cancel_order') canceled_orders,
  COUNT(DISTINCT order_id) FILTER(WHERE action = 'create_order')
    - COUNT(DISTINCT order_id) FILTER(WHERE action = 'cancel_order') actual_orders,
  ROUND(1.0 * (COUNT(DISTINCT order_id) FILTER(WHERE action = 'create_order')
    - COUNT(DISTINCT order_id) FILTER(WHERE action = 'cancel_order'))
    / COUNT(DISTINCT order_id) FILTER(WHERE action = 'create_order'), 3) success_rate
FROM
  user_actions
WHERE
  time BETWEEN '2022-08-24' and '2022-09-07'
GROUP BY
  weekday_number,
  weekday
ORDER BY
  weekday_number


------------------------------------

7.1
SELECT
  ROUND(AVG(cnt), 2) orders_avg
FROM
  (
    SELECT
      COUNT(*) cnt
    FROM
      user_actions
    WHERE
      action = 'create_order'
    GROUP BY
      user_id
  ) counts


7.2
WITH counts AS (
  SELECT
    COUNT(*) cnt
  FROM
    user_actions
  WHERE
    action = 'create_order'
  GROUP BY
    user_id
)
SELECT
  ROUND(AVG(cnt), 2) orders_avg
FROM
  counts


7.3
SELECT product_id, name, price
FROM products
WHERE price != (SELECT MIN(price) FROM products)
ORDER BY price DESC


7.4
SELECT product_id, name, price
FROM products
WHERE price >= (SELECT AVG(price) FROM products) + 20
ORDER BY price DESC


7.5
WITH latest AS (
  SELECT MAX(time) mx FROM user_actions
)

SELECT COUNT (DISTINCT user_id) users_count
FROM user_actions
WHERE time BETWEEN
                (SELECT mx FROM latest) - INTERVAL '1 week'
                AND (SELECT mx FROM latest)


7.5-2
SELECT COUNT (DISTINCT user_id) users_count
FROM user_actions
WHERE time > (SELECT MAX(time) mx FROM user_actions) - INTERVAL '1 week'


7.6
WITH maxi AS (
  SELECT MAX(time) that_day FROM courier_actions
)

SELECT MIN(AGE((SELECT that_day FROM maxi)::DATE, birth_date))::VARCHAR AS min_age
FROM couriers
WHERE sex = 'male'


7.6-2
SELECT MIN(AGE((SELECT MAX(time) FROM courier_actions)::DATE, birth_date))::VARCHAR AS min_age
FROM couriers
WHERE sex = 'male'


7.7
WITH canceled_orders AS (
  SELECT order_id FROM user_actions WHERE action = 'cancel_order'
)

SELECT order_id
FROM user_actions
WHERE order_id NOT IN (SELECT * FROM canceled_orders)
ORDER BY order_id


7.7-1
SELECT order_id
FROM user_actions
WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
ORDER BY order_id
LIMIT 1000


7.7-2
SELECT order_id
FROM user_actions ua1
WHERE NOT EXISTS (SELECT * FROM user_actions ua2 WHERE action = 'cancel_order' AND ua1.order_id = ua2.order_id)
ORDER BY order_id
LIMIT 1000


7.8
WITH counters AS (
  SELECT
    COUNT(*) cntr
  FROM
    user_actions
  WHERE
    action = 'create_order'
  GROUP BY
    user_id
),
average AS (
  SELECT
    ROUND(AVG(cntr), 2) aver
  FROM
    counters
)
SELECT
  user_id,
  COUNT(*) orders_count,
  (SELECT * FROM average) orders_avg,
  COUNT(*) - (SELECT * FROM average) orders_diff
FROM
  user_actions
WHERE
  action = 'create_order'
GROUP BY
  user_id
ORDER BY
  user_id


7.8-2
WITH counters AS (
  SELECT
    user_id,
    COUNT(*) orders_count
  FROM
    user_actions
  WHERE
    action = 'create_order'
  GROUP BY
    user_id
),

average AS (
  SELECT
    ROUND(AVG(orders_count), 2) aver
  FROM
    counters
)

SELECT
  user_id,
  orders_count,
  (SELECT * FROM average) orders_avg,
  orders_count - (SELECT * FROM average) orders_diff
FROM
  counters
ORDER BY
  user_id
LIMIT
  1000


7.9
WITH average_price AS (
  SELECT
    ROUND(AVG(price), 2)
  FROM
    products
)
SELECT
  product_id,
  name,
  price,
  CASE
    WHEN price >= (SELECT * FROM average_price) + 50
    THEN 0.85 * price
    WHEN price <= (SELECT * FROM average_price) - 50
    THEN 0.9 * price
    ELSE price
  END AS new_price
FROM
  products
ORDER BY
  price DESC


7.10
SELECT COUNT(*) orders_count
FROM (
    SELECT order_id
    FROM courier_actions
    WHERE action = 'accept_order'

    EXCEPT

    SELECT order_id
    FROM user_actions
    WHERE action = 'create_order'
) t


7.11
SELECT COUNT(*) orders_count
FROM (
    SELECT order_id
    FROM courier_actions
    WHERE action = 'accept_order'

    EXCEPT

    SELECT order_id
    FROM courier_actions
    WHERE action = 'deliver_order'
) t


7.12
WITH orders_canceled_list AS(
    SELECT
        order_id
    FROM
        user_actions
    WHERE
        action = 'cancel_order'
)

SELECT
    (SELECT COUNT(order_id) FROM orders_canceled_list) orders_canceled,
    COUNT(order_id) orders_canceled_and_delivered
FROM
    courier_actions ca
WHERE
    action = 'deliver_order'
    AND EXISTS (SELECT * FROM orders_canceled_list ocl WHERE ocl.order_id = ca.order_id)


7.13
WITH
    orders_canceled_list AS(
        SELECT
            order_id
        FROM
            user_actions
        WHERE
            action = 'cancel_order'
    ),

    orders_undelivered_list AS(
        SELECT
            order_id
        FROM
            courier_actions ca
        GROUP BY
            order_id
        HAVING
            COUNT(*) = 1
    )

SELECT
    (SELECT COUNT(order_id) FROM orders_undelivered_list) orders_undelivered,
    (SELECT COUNT(order_id) FROM orders_canceled_list) orders_canceled,
    (SELECT COUNT(order_id) FROM orders_undelivered_list) - (SELECT COUNT(order_id) FROM orders_canceled_list) orders_in_process


7.14
SELECT
  user_id, birth_date
FROM
  users
WHERE
  sex = 'male'
  AND birth_date < (SELECT MIN(birth_date) FROM users WHERE sex = 'female')
ORDER BY
  user_id


7.15
WITH last_order_id AS (
  SELECT order_id
  FROM courier_actions
  WHERE action = 'deliver_order'
  ORDER BY time DESC
  LIMIT 100
)

SELECT order_id, product_ids
FROM orders
WHERE order_id IN (SELECT order_id FROM last_order_id)
ORDER BY order_id


7.16
WITH actions AS (
  SELECT courier_id, count(*) cnt
  FROM courier_actions
  WHERE time >= '2022-09-01' AND action = 'deliver_order'
  GROUP BY courier_id
)

SELECT courier_id, birth_date, sex
FROM couriers
WHERE courier_id IN (SELECT courier_id FROM actions WHERE cnt >= 30)
ORDER BY courier_id


7.16-2
WITH actions AS (
  SELECT courier_id, count(*) cnt
  FROM courier_actions
  WHERE time >= '2022-09-01' AND action = 'deliver_order'
  GROUP BY courier_id
)

SELECT courier_id, birth_date, sex
FROM couriers
WHERE EXISTS (SELECT * FROM actions WHERE cnt >= 30 AND actions.courier_id = couriers.courier_id)
ORDER BY courier_id


7.17
SELECT
    round(AVG(array_length(product_ids, 1)), 3) avg_order_size
FROM
    orders o
    INNER JOIN user_actions using (order_id)
    INNER JOIN users using (user_id)
WHERE
    sex = 'male'
    and EXISTS (SELECT * FROM user_actions ua WHERE  action = 'cancel_order' and o.order_id = ua.order_id)


7.18
WITH
  last_times AS (
    SELECT MAX(time) last_time
    FROM user_actions
  ),

  ages AS (
    SELECT
      user_id,
      DATE_PART('YEAR', AGE((SELECT last_time FROM last_times), birth_date)) AS age
    FROM users
  ),

  average_age AS (
    SELECT ROUND(AVG(age)) avg_age
    FROM ages
  )

SELECT
  user_id,
  COALESCE (age, (SELECT avg_age FROM average_age)) age
FROM ages
ORDER BY user_id


7.18-2
WITH
  ages AS (
    SELECT
      user_id,
      DATE_PART('YEAR', AGE(( SELECT MAX(time) FROM user_actions), birth_date)) AS age
    FROM users
  )

SELECT
  user_id,
  COALESCE (age, (SELECT ROUND(AVG(age)) FROM ages)) age
FROM ages
ORDER BY user_id


7.19
SELECT
  order_id,
  MIN(time) time_accepted,
  MAX(time) time_delivered ,
  ROUND(EXTRACT(EPOCH FROM MAX(time) - MIN(time)) / 60)::INT delivery_time
FROM
  courier_actions
  INNER JOIN orders USING (order_id)
WHERE
  ARRAY_LENGTH(product_ids, 1) > 5
GROUP BY
  order_id
HAVING
  COUNT(*) > 1
ORDER BY
  order_id


7.20
-- в один момент времени может создаваться несколько заказов (одним или несколькими пользователями)
WITH not_canceled_orders AS (
    SELECT
        min(time)::DATE date
    FROM
        user_actions ua1
    WHERE
        NOT EXISTS (SELECT order_id FROM user_actions ua2 WHERE ua2.action = 'cancel_order' and ua1.order_id = ua2.order_id)
    GROUP BY
        ua1.user_id
    ORDER BY
        user_id
)

SELECT
    date,
    COUNT(*) first_orders
FROM
    not_canceled_orders
GROUP BY
    date
ORDER BY
    date


7.21
SELECT creation_time, order_id, product_ids, UNNEST(product_ids) product_id
FROM orders
LIMIT 100


7.22
SELECT UNNEST(product_ids) product_id, COUNT(*) times_purchased
FROM orders
GROUP BY product_id
ORDER BY times_purchased DESC
LIMIT 10


7.23
WITH
  goods AS (
    SELECT order_id, product_ids, UNNEST(product_ids) product_id
    FROM orders
  ),

  expensive AS (
    SELECT product_id
    FROM products
    ORDER BY price DESC
    LIMIT 5
  )

SELECT DISTINCT order_id, product_ids
FROM goods
WHERE product_id IN (SELECT product_id  FROM expensive)
ORDER BY order_id


7.23-2
WITH
  goods AS (
    SELECT order_id, product_ids, UNNEST(product_ids) product_id
    FROM orders
  ),

  expensive AS (
    SELECT product_id
    FROM products
    ORDER BY price DESC
    LIMIT 5
  )

SELECT DISTINCT order_id, product_ids
FROM goods
WHERE EXISTS (SELECT product_id  FROM expensive WHERE goods.product_id = expensive.product_id)
ORDER BY order_id



--------------------------

8.1
SELECT
  ua.user_id user_id_left,
  u.user_id user_id_right,
  order_id,
  time,
  action,
  sex,
  birth_date
FROM
  user_actions ua
  INNER JOIN users u USING(user_id)
ORDER BY
  user_id_left


8.2
SELECT
  COUNT(DISTINCT users.user_id) users_count
FROM
  user_actions
  INNER JOIN users USING(user_id)


8.3
SELECT
  ua.user_id user_id_left,
  u.user_id user_id_right,
  order_id,
  time,
  action,
  sex,
  birth_date
FROM
  user_actions ua
  LEFT JOIN users u USING(user_id)
ORDER BY
  user_id_left


8.4
SELECT
  COUNT(DISTINCT ua.user_id) users_count
FROM
  user_actions ua
  LEFT JOIN users u USING(user_id)


8.5
SELECT
  ua.user_id user_id_left,
  u.user_id user_id_right,
  order_id,
  time,
  action,
  sex,
  birth_date
FROM
  user_actions ua
  LEFT JOIN users u USING(user_id)
WHERE
  u.user_id IS NOT NULL
ORDER BY
  user_id_left


8.6
/*
Пробуем последовать рекомендациям из задания. Иногда даже такое помогает!
*/
SELECT
    u.birth_date users_birth_date,
    u.users_count,
    c.birth_date couriers_birth_date,
    c.couriers_count

FROM
    (SELECT birth_date, COUNT(user_id) AS users_count
    FROM users
    WHERE birth_date IS NOT NULL
    GROUP BY birth_date) AS u

    FULL JOIN

    (SELECT birth_date, COUNT(courier_id) AS couriers_count
    FROM couriers
    WHERE birth_date IS NOT NULL
    GROUP BY birth_date) AS c

    USING (birth_date)

ORDER BY
    users_birth_date, couriers_birth_date


8.6-2
SELECT
    u.birth_date AS users_birth_date,
    CASE WHEN COUNT(DISTINCT u.user_id) > 0 THEN COUNT(DISTINCT u.user_id) ELSE NULL END AS users_count,
    c.birth_date AS couriers_birth_date,
    CASE WHEN COUNT(DISTINCT c.courier_id) > 0 THEN COUNT(DISTINCT c.courier_id) ELSE NULL END AS couriers_count
FROM
    users u
    FULL JOIN couriers c USING (birth_date)
WHERE
    u.birth_date IS NOT NULL
    OR c.birth_date IS NOT NULL
GROUP BY
    u.birth_date,
    c.birth_date
ORDER BY
    users_birth_date,
    couriers_birth_date


8.7
/*
Пробуем последовать рекомендациям из задания
*/
SELECT
    COUNT(*) dates_count
FROM
    (SELECT birth_date
    FROM users
    WHERE birth_date IS NOT NULL

    UNION

    SELECT birth_date
    FROM couriers
    WHERE birth_date IS NOT NULL
    )bd


8.8
SELECT *
FROM
    (SELECT user_id
    FROM users
    LIMIT 100) u

    CROSS JOIN

    (SELECT name
    FROM products) p
ORDER BY
    user_id,
    name


8.9
SELECT
  ua.user_id,
  ord.order_id,
  ord.product_ids
FROM
  user_actions ua
  INNER JOIN
  orders ord
  USING (order_id)
ORDER BY
  ua.user_id,
  ord.order_id


8.10
/*
Каждый удаленный заказ когда-то был создан. Поэтому != 'cancel_order' не достаточно
*/
WITH not_canceled_orders AS(
  SELECT order_id
  FROM user_actions
  WHERE action = 'create_order'

  EXCEPT

  SELECT order_id
  FROM user_actions
  WHERE action = 'cancel_order'
)

SELECT
  ua.user_id,
  ord.order_id,
  ord.product_ids
FROM
  user_actions ua
  INNER JOIN
  orders ord
  ON ua.order_id = ord.order_id
WHERE
  ord.order_id IN (SELECT order_id FROM not_canceled_orders)
ORDER BY
  ua.user_id,
  ord.order_id


8.10-2
SELECT
  ua.user_id,
  ord.order_id,
  ord.product_ids
FROM
  user_actions ua
  INNER JOIN
  orders ord
  ON ua.order_id = ord.order_id
WHERE
  NOT EXISTS (SELECT * FROM user_actions ua2 WHERE action = 'cancel_order' and ua.order_id = ua2.order_id)
--   ord.order_id IN (SELECT order_id FROM not_canceled_orders)
ORDER BY
  ua.user_id,
  ord.order_id
LIMIT
  1000


8.11
WITH not_canceled_orders AS(
  SELECT order_id
  FROM user_actions
  WHERE action = 'create_order'

  EXCEPT

  SELECT order_id
  FROM user_actions
  WHERE action = 'cancel_order'
)

SELECT
  user_id,
  ROUND(AVG(array_length(product_ids, 1)), 2) avg_order_size
FROM
  (SELECT
    ua.user_id,
    ord.order_id,
    ord.product_ids
  FROM
    user_actions ua
    INNER JOIN
    orders ord
    ON ua.order_id = ord.order_id
  WHERE
    ord.order_id IN (SELECT order_id FROM not_canceled_orders)) delivered_products
GROUP BY
  user_id
ORDER BY
  user_id


8.11-2
SELECT
  user_id,
  ROUND(AVG(array_length(product_ids, 1)), 2) avg_order_size
FROM
  (SELECT
    ua.user_id,
    ord.order_id,
    ord.product_ids
  FROM
    user_actions ua
    INNER JOIN
    orders ord
    ON ua.order_id = ord.order_id
  WHERE
    NOT EXISTS (SELECT * FROM user_actions ua2 WHERE action = 'cancel_order' and ua.order_id = ua2.order_id)) user_orders
GROUP BY
  user_id
ORDER BY
  user_id
LIMIT
  1000


8.12
SELECT
  order_id, splited_orders.product_id, price
FROM
  (SELECT order_id, UNNEST(product_ids) product_id
  FROM orders) splited_orders
  JOIN products USING(product_id)
ORDER BY
  order_id, product_id


8.13
WITH
  splited_orders AS (
    SELECT order_id, UNNEST(product_ids) product_id
    FROM orders
    LIMIT 5
  ),
  priced_orders AS (
    SELECT
      order_id, t1.product_id, price
    FROM
      (SELECT * FROM splited_orders) t1
      JOIN products USING(product_id)
  )

SELECT
  order_id, SUM(price) order_price
FROM
  priced_orders
GROUP BY
  order_id
ORDER BY
  order_id


8.14
WITH
  splited_orders AS (
    SELECT order_id, UNNEST(product_ids) product_id
    FROM orders
  ),
  priced_orders AS (
    SELECT
      order_id, t1.product_id, price
    FROM
      (SELECT * FROM splited_orders) t1
      JOIN products USING(product_id)
  ),
  order_sums AS (
    SELECT
      order_id,
      SUM(price) order_value
    FROM
      priced_orders
    GROUP BY
      order_id
  ),
  not_canceled_orders AS (
    SELECT order_id
    FROM user_actions
    WHERE action = 'create_order'
    EXCEPT
    SELECT order_id
    FROM user_actions
    WHERE action = 'cancel_order'
  ),
  delivered_products AS(
    SELECT
      ua.user_id,
      ord.order_id,
      ord.product_ids
    FROM
      user_actions ua
      INNER JOIN orders ord USING (order_id)
    WHERE ord.order_id IN (SELECT order_id FROM not_canceled_orders)
  ),
  order_sizes AS (
    SELECT
      user_id,
      order_id,
      array_length(product_ids, 1) order_size
    FROM
      delivered_products
  )

SELECT
  user_id,
  COUNT(order_id) orders_count,
  ROUND(AVG(order_size), 2) avg_order_size,
  SUM(order_value) sum_order_value,
  ROUND(AVG(order_value), 2) avg_order_value,
  MIN(order_value) min_order_value,
  MAX(order_value) max_order_value
FROM
  order_sums
  JOIN order_sizes USING (order_id)
GROUP BY
  user_id
ORDER BY
  user_id


8.14-2
WITH
  splited_orders AS (
    SELECT order_id, UNNEST(product_ids) product_id
    FROM orders
  ),
  order_sums AS (
    SELECT
      order_id,
      SUM(price) order_value
    FROM
      splited_orders
      JOIN products USING(product_id)
    GROUP BY
      order_id
  ),
  order_sizes AS (
    SELECT
      user_id,
      order_id,
      array_length(product_ids, 1) order_size
    FROM
      user_actions ua
      INNER JOIN orders ord USING (order_id)
    WHERE ord.order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
  )

SELECT
  user_id,
  COUNT(order_id) orders_count,
  ROUND(AVG(order_size), 2) avg_order_size,
  SUM(order_value) sum_order_value,
  ROUND(AVG(order_value), 2) avg_order_value,
  MIN(order_value) min_order_value,
  MAX(order_value) max_order_value
FROM
  order_sums
  JOIN order_sizes USING (order_id)
GROUP BY
  user_id
ORDER BY
  user_id


8.14-3
WITH
  order_sums AS (
    SELECT
      order_id,
      SUM(price) order_value
    FROM
      (SELECT order_id, UNNEST(product_ids) product_id FROM orders) splited_orders
      JOIN products USING(product_id)
    GROUP BY
      order_id
  ),

  order_sizes AS(
    SELECT
      ua.user_id,
      ord.order_id,
      array_length(ord.product_ids, 1) order_size
    FROM
      user_actions ua
      INNER JOIN orders ord USING (order_id)
    WHERE
      NOT EXISTS (SELECT order_id FROM user_actions ua2 WHERE action = 'cancel_order' AND ua.order_id = ua2.order_id)
  )

SELECT
  user_id,
  COUNT(order_id) orders_count,
  ROUND(AVG(order_size), 2) avg_order_size,
  SUM(order_value) sum_order_value,
  ROUND(AVG(order_value), 2) avg_order_value,
  MIN(order_value) min_order_value,
  MAX(order_value) max_order_value
FROM
  order_sums
  JOIN order_sizes USING (order_id)
GROUP BY
  user_id
ORDER BY
  user_id
LIMIT
  1000


8.15
with splited_orders as (
    SELECT
        creation_time::date as date,
        unnest (product_ids) as product_id
    FROM   orders o
    WHERE  not exists (SELECT order_id
                       FROM   user_actions ua
                       WHERE  ua.order_id = o.order_id
                                and action = 'cancel_order')
)

SELECT
    date,
    sum(price) revenue
FROM
    splited_orders
    INNER JOIN products using (product_id)
GROUP BY
    date
ORDER BY
    date


8.16
WITH splited_orders AS (
  SELECT
    creation_time::date AS date,
    UNNEST (product_ids) AS product_id
  FROM
    orders o
  WHERE NOT EXISTS (SELECT order_id FROM user_actions ua WHERE ua.order_id = o.order_id AND action = 'cancel_order')
)

SELECT
  date,
  SUM(price) revenue
FROM
  splited_orders
  INNER JOIN products USING (product_id)
GROUP BY
  date
ORDER BY
  date


8.17
WITH
  splited_orders AS (
    SELECT DISTINCT order_id, UNNEST(product_ids) product_id
    FROM orders
    WHERE order_id in (SELECT order_id
                        FROM courier_actions
                        WHERE time >= '2022-09-01' and action = 'deliver_order')
  ),
  counter AS (
    SELECT product_id, COUNT(*) times_purchased
    FROM splited_orders
    GROUP BY product_id
  )

SELECT name, times_purchased
FROM counter JOIN products USING (product_id)
ORDER BY times_purchased desc
LIMIT 10


8.17
WITH cancel_rates AS (
  SELECT
    user_id,
    ROUND(
        COUNT(*) FILTER (WHERE action = 'cancel_order')
        / CAST(COUNT(*) FILTER (WHERE action = 'create_order') AS DECIMAL)
    , 2) AS cancel_rate
  FROM
    user_actions
  GROUP BY
    user_id
)

SELECT
  COALESCE(sex, 'unknown') sex,
  ROUND(AVG(cancel_rate), 3) avg_cancel_rate
FROM
  cancel_rates
  LEFT JOIN users USING (user_id)
GROUP BY sex
ORDER BY sex


8.18
SELECT orders.order_id
FROM orders JOIN courier_actions USING (order_id)
ORDER BY time - creation_time DESC
LIMIT 10


8.19
WITH
  splited_orders AS (
    SELECT order_id, UNNEST(product_ids) product_id
    FROM orders
  ),
  named_orders AS (
    SELECT order_id, name
    FROM splited_orders
    JOIN products USING (product_id)
  )

SELECT order_id, ARRAY_AGG(name) product_names
FROM named_orders
GROUP BY order_id
ORDER BY order_id


8.20
WITH
  max_orders AS (
    SELECT *
    FROM orders
    WHERE ARRAY_LENGTH(product_ids, 1) = (SELECT MAX(ARRAY_LENGTH(product_ids, 1)) FROM orders)
  ),
  last_times AS (
    SELECT MAX(time)
    FROM user_actions
  )

SELECT
  DISTINCT
  max_orders.order_id,
  users.user_id,
  DATE_PART('YEAR', AGE((SELECT * FROM last_times), users.birth_date)) user_age,
  couriers.courier_id,
  DATE_PART('YEAR', AGE((SELECT * FROM last_times), couriers.birth_date)) courier_age
FROM max_orders
  JOIN user_actions USING (order_id)
  JOIN courier_actions USING (order_id)
  JOIN users USING (user_id)
  JOIN couriers USING (courier_id)
ORDER BY
  order_id


SELECT
  *
FROM orders
  JOIN user_actions USING (order_id)
  JOIN courier_actions USING (order_id)
LIMIT
  10


8.21
/*
['кура', 'булка', 'кура'] => 1 пара (а не две).

При создании пар сравниваем не id товаров, а их имена.

Отсекаем отмененные заказы.

Часто сразу создаем список из всех 87 * 86 / 2 = 14 964 возможные пары,
а потом ищем их в каждом заказе, получая ошибку "time limit".
Кажется, лучше формировать пары из каждого заказа по отдельности.
*/
WITH
  not_canceled_orders AS (
    SELECT order_id
    FROM user_actions
    WHERE action = 'create_order'
    EXCEPT
    SELECT order_id
    FROM user_actions
    WHERE action = 'cancel_order'
  ),
  splited_orders AS (
    SELECT DISTINCT order_id, UNNEST(product_ids) product_id
    FROM orders
    WHERE order_id IN (SELECT * FROM not_canceled_orders)
  ),
  named_orders AS (
    SELECT order_id, name
    FROM splited_orders
      JOIN products USING (product_id)
  ),
  pairs AS (
    SELECT
      no.order_id,
      array[no.name, no2.name] pair
    FROM
      named_orders no
      CROSS JOIN named_orders no2
    WHERE no.order_id = no2.order_id
          AND no.name < no2.name
  )


SELECT
  pair,
  COUNT(pair) count_pair
FROM
  pairs
GROUP BY
  pair
ORDER BY
  count_pair DESC,
  pair


8.20-2
WITH
  splited_orders AS (
    SELECT DISTINCT order_id, UNNEST(product_ids) product_id
    FROM orders o
    WHERE NOT EXISTS (SELECT order_id FROM user_actions ua WHERE action = 'cancel_order' AND ua.order_id = o.order_id)
  ),
  named_orders AS (
    SELECT order_id, name
    FROM splited_orders
      JOIN products USING (product_id)
  ),
  pairs AS (
    SELECT
      no.order_id,
      array[no.name, no2.name] pair
    FROM
      named_orders no
      CROSS JOIN named_orders no2
    WHERE no.order_id = no2.order_id
          AND no.name < no2.name
  )


SELECT
  pair,
  COUNT(pair) count_pair
FROM
  pairs
GROUP BY
  pair
ORDER BY
  count_pair DESC,
  pair


------------------

10.1
SELECT
  product_id,
  name,
  price,
  ROW_NUMBER() OVER (ORDER BY price DESC) product_number,
  RANK() OVER (ORDER BY price DESC) product_rank,
  DENSE_RANK() OVER (ORDER BY price DESC) product_dense_rank
FROM
  products


10.2
SELECT
  product_id,
  name,
  price,
  MAX(price) OVER() max_price,
  ROUND(price / MAX(price) OVER(), 2) share_of_max
FROM
  products
ORDER BY
  price DESC,
  product_id


10.3
SELECT
  product_id,
  name,
  price,
  MAX(price) OVER(ORDER BY price DESC) max_price,
  MIN(price) OVER(ORDER BY price DESC) min_price
FROM
  products
ORDER BY
  price DESC,
  product_id


10.4
WITH
  order_counts AS (
    SELECT
      creation_time::DATE date,
      COUNT(*) orders_count
    FROM
      orders
    WHERE
      order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
    GROUP BY
      1
  )

SELECT
  date,
  orders_count,
  SUM(orders_count) OVER(ORDER BY date) orders_cum_count
FROM
  order_counts


10.5
WITH
  not_canceled_orders AS (
    SELECT order_id
    FROM user_actions
    WHERE action = 'create_order'
    EXCEPT
    SELECT order_id
    FROM user_actions
    WHERE action = 'cancel_order'
  )

SELECT
  user_id,
  order_id,
  time,
  ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY time) order_number
FROM
  user_actions
WHERE
  order_id IN (SELECT * FROM not_canceled_orders)


10.5-2
SELECT
  user_id,
  order_id,
  time,
  ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY time) order_number
FROM
  user_actions ua1
WHERE
  NOT EXISTS (SELECT * FROM user_actions ua2 WHERE action = 'cancel_order' AND ua1.order_id = ua2.order_id)
LIMIT
  1000


10.6
SELECT
  user_id,
  order_id,
  time,
  ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY time) order_number,
  LAG(time, 1) OVER(PARTITION BY user_id ORDER BY time) time_lag,
  time - LAG(time, 1) OVER(PARTITION BY user_id ORDER BY time) time_diff
FROM
  user_actions
WHERE
  order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')


10.6-2
SELECT
  user_id,
  order_id,
  time,
  ROW_NUMBER() OVER(PARTITION BY user_id ORDER BY time) order_number,
  LAG(time, 1) OVER(PARTITION BY user_id ORDER BY time) time_lag,
  time - LAG(time, 1) OVER(PARTITION BY user_id ORDER BY time) time_diff
FROM
  user_actions ua1
WHERE
  NOT EXISTS (SELECT * FROM user_actions ua2 WHERE action = 'cancel_order' AND ua1.order_id = ua2.order_id)
LIMIT
  1000


10.7
WITH intervals AS (
  SELECT
    user_id,
    time - LAG(time, 1) OVER(PARTITION BY user_id ORDER BY time) time_between_orders
  FROM
    user_actions
  WHERE
    order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
  )

SELECT
  user_id,
  ROUND(EXTRACT(epoch FROM AVG(time_between_orders)) / 3600)::INT hours_between_orders
FROM
  intervals
WHERE
  time_between_orders IS NOT NULL
GROUP BY
  user_id
ORDER BY
  user_id
LIMIT
  1000


10.8
/*
"по трём **предыдущим** дням".
3 PRECEDING AND 1 PRECEDING
*/
WITH
  order_counts AS (
    SELECT
      creation_time::DATE date,
      COUNT(*) orders_count
    FROM
      orders
    WHERE
      order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
    GROUP BY
      1
  )

SELECT
  date,
  orders_count,
  ROUND(
      AVG(orders_count)
      OVER(ORDER BY date ROWS BETWEEN 3 PRECEDING AND 1 PRECEDING),
      2) moving_avg
FROM
  order_counts


10.9
SELECT
  courier_id,
  COUNT(order_id) delivered_orders,
  ROUND(AVG(COUNT(order_id)) OVER (), 2) avg_delivered_orders,
  CASE
    WHEN COUNT(order_id) > ROUND(AVG(COUNT(order_id)) OVER (), 2) THEN 1
    ELSE 0
    END AS is_above_avg
FROM
  courier_actions
WHERE
  time BETWEEN '2022-09-01' AND '2022-10-01'
  AND action = 'deliver_order'
GROUP BY
  courier_id
ORDER BY
  courier_id


10.10
WITH order_types AS (
    SELECT
      time::date AS date,
      CASE
        WHEN time = MIN(time) OVER (PARTITION BY user_id) THEN 'Первый'
        ELSE 'Повторный'
        END order_type
    FROM
      user_actions ua1
    WHERE
      NOT EXISTS (SELECT order_id FROM user_actions ua2 WHERE ua1.order_id = ua2.order_id AND action = 'cancel_order')
)

SELECT
  *,
  COUNT(order_type) orders_count
FROM
  order_types
GROUP BY
  date,
  order_type
ORDER BY
  date,
  order_type


10.11
WITH
    order_types as (
        SELECT
            time::date as date,
                case when time = min(time) OVER (PARTITION BY user_id) then 'Первый'
                     else 'Повторный' end order_type
        FROM
            user_actions ua1
        WHERE  not exists (
                SELECT order_id
                FROM user_actions ua2
                WHERE ua1.order_id = ua2.order_id and action = 'cancel_order'
                )
    ),

    order_count as (
        SELECT
            *,
            count(order_type) orders_count
        FROM
            order_types
        GROUP BY
            date,
            order_type
    )

SELECT
    *,
    round(orders_count / sum(orders_count) OVER (PARTITION BY date), 2) orders_share
FROM
    order_count
ORDER BY
    date,
    order_type


10.12
SELECT
  product_id,
  name,
  price,
  ROUND(AVG(price) OVER(), 2) avg_price,
  ROUND(AVG(price)
      FILTER(WHERE price != (SELECT * FROM(SELECT MAX(price) FROM products) tmp))
      OVER(), 2)
      AS avg_price_filtered
FROM
  products
ORDER BY
  price DESC,
  product_id


10.13
WITH counter AS (
  SELECT
    user_id, order_id, action, time,
    COUNT(order_id) FILTER (WHERE action = 'create_order')
         OVER (PARTITION BY user_id ORDER BY time) created_orders,
    COUNT(order_id) FILTER (WHERE action = 'cancel_order')
         OVER (PARTITION BY user_id ORDER BY time) canceled_orders
  FROM
    user_actions
)


SELECT
  user_id, order_id, action, time, created_orders, canceled_orders,
  ROUND(canceled_orders::DECIMAL / created_orders, 2) cancel_rate
FROM
  counter
ORDER BY
  user_id, order_id, action, time


10.14
WITH counter AS (
  SELECT
    courier_id,
    COUNT(*) orders_count
  FROM
    courier_actions
  WHERE
    action = 'deliver_order'
  GROUP BY
    courier_id

)

SELECT
  courier_id,
  orders_count,
  ROW_NUMBER() OVER(ORDER BY orders_count DESC, courier_id) courier_rank
FROM
  counter
LIMIT
  (SELECT ROUND(COUNT(DISTINCT courier_id) * 0.1) FROM courier_actions)


10.15
/*
Время последнего действия не курьера, а *вообще* последнего в этой таблице.
Оно одинаковое для всех.

Время максимальное надо посчитать точно: не 10 дней с последнего дня,
а ровно 10 суток с момента "последнего действия"
*/
WITH
  lt(last_time) AS (
    SELECT MAX(time) FROM courier_actions
  ),
  days_together AS (
    SELECT
      courier_id,
      DATE_PART('DAY', last_time - MIN(time) OVER(PARTITION BY courier_id)) AS days_employed,
      action
    FROM
      courier_actions, lt
  )

SELECT
  courier_id,
  MAX(days_employed) days_employed,
  COUNT(action) delivered_orders
FROM
  days_together
WHERE
  days_employed >= 10
  AND action = 'deliver_order'
GROUP BY
  courier_id
ORDER BY
  days_employed DESC,
  courier_id


10.15-2
WITH
  days_together AS (
    SELECT
      courier_id,
      DATE_PART(
        'DAY',
        (SELECT MAX(time) FROM courier_actions) - MIN(time) OVER(PARTITION BY courier_id)
      ) AS days_employed,
      action
    FROM
      courier_actions
  )

SELECT
  courier_id,
  MAX(days_employed) days_employed,
  COUNT(action) delivered_orders
FROM
  days_together
WHERE
  days_employed >= 10
  AND action = 'deliver_order'
GROUP BY
  courier_id
ORDER BY
  days_employed DESC,
  courier_id


10.16
/*
"по убыванию даты совершения заказа (**именно даты**, а не времени)"
*/
WITH
  splited_orders AS (
    SELECT
      order_id,
      creation_time,
      UNNEST(product_ids) product_id
    FROM orders
    WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
  ),
  valued_orders AS (
    SELECT
      order_id,
      MAX(creation_time::DATE) order_day,
      MAX(creation_time) creation_time,
      SUM(price) order_price
    FROM
      splited_orders
      INNER JOIN products USING (product_id)
    GROUP BY
      order_id
  )

SELECT
  order_id,
  creation_time,
  order_price,
  SUM(order_price) OVER (PARTITION BY order_day) daily_revenue,
  ROUND(100.0 * order_price / SUM(order_price) OVER (PARTITION BY order_day), 3)  percentage_of_daily_revenue
FROM
  valued_orders
ORDER BY
  order_day DESC,
  percentage_of_daily_revenue DESC,
  order_id


10.17
WITH
  splited_orders AS (
    SELECT
      order_id,
      creation_time,
      UNNEST(product_ids) product_id
    FROM orders
    WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
  ),
  valued_orders AS (
    SELECT
      order_id,
      MAX(creation_time::DATE) AS date,
      SUM(price) order_price
    FROM
      splited_orders
      INNER JOIN products USING (product_id)
    GROUP BY
      order_id
  ),
  valued_days AS (
    SELECT
      date,
      ROUND(SUM(order_price), 1) daily_revenue
    FROM
      valued_orders
    GROUP BY
      date
  )

SELECT
  date,
  daily_revenue,
  COALESCE(
      ROUND(
          daily_revenue - LAG(daily_revenue) OVER (ORDER BY date)
          , 1)
      , 0
  ) AS revenue_growth_abs,
  COALESCE(
      ROUND(
           100.0 * (daily_revenue - LAG(daily_revenue) OVER (ORDER BY date))
               / LAG(daily_revenue) OVER (ORDER BY date)
           , 1)
      , 0
  ) AS revenue_growth_percentage
FROM
  valued_days
ORDER BY
  date


10.17-2
WITH
  splited_orders AS (
    SELECT
      order_id,
      creation_time,
      UNNEST(product_ids) product_id
    FROM orders
    WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
  ),
  valued_days AS (
    SELECT
      creation_time::DATE AS date,
      ROUND(SUM(price), 1) daily_revenue
    FROM
      splited_orders
      INNER JOIN products USING (product_id)
    GROUP BY
      date
  )

SELECT
  date,
  daily_revenue,
  COALESCE(
      ROUND(
          daily_revenue - LAG(daily_revenue) OVER (ORDER BY date)
          , 1)
      , 0
  ) AS revenue_growth_abs,
  COALESCE(
      ROUND(
           100.0 * (daily_revenue - LAG(daily_revenue) OVER (ORDER BY date))
               / LAG(daily_revenue) OVER (ORDER BY date)
           , 1)
      , 0
  ) AS revenue_growth_percentage
FROM
  valued_days
ORDER BY
  date


10.18
/*
Похоже проверяют не по полному набору данных. То, что у нас 321 получилось еще ничего не значит.
Если проранжировать все стоимости, то на 39-й позиции там 1р, на 40-й - 2р.
Смотрим наш код на первых 77 заказах: LIMIT 77 в позапросе. Должно быть 1.
На LIMIT 79 - 2. На LIMIT 78 - 1,5.
*/
WITH
  splited_orders AS (
    SELECT
      order_id,
      creation_time,
      UNNEST(product_ids) product_id
    FROM orders
    WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
  ),
  valued_orders AS (
    SELECT
      order_id,
      MAX(creation_time::DATE) AS date,
      SUM(price) order_price
    FROM
      splited_orders
      INNER JOIN products USING (product_id)
    GROUP BY
      order_id
    ORDER BY
      order_price DESC
  ),
  rows_for_computing AS (
    SELECT
      *
    FROM
      valued_orders
    OFFSET
      (SELECT (COUNT(*) + 1) / 2 - 1 FROM valued_orders)
    LIMIT
      2 - MOD((SELECT COUNT(*) FROM valued_orders), 2)
  )


SELECT
  --читерство: для сдачи задания обязательна была оконка
  AVG(order_price) OVER () median_price
FROM
  rows_for_computing
LIMIT
  1

-------------------------------------

PART II


1.1
WITH
  users_min_dates AS (
    SELECT
      MIN(time)::DATE AS date
    FROM
      user_actions
    GROUP BY
      user_id
  ),

  users_counts_by_date AS (
    SELECT
      date,
      COUNT(*) new_users
    FROM
      users_min_dates
    GROUP BY
      date
  ),

  couriers_min_dates AS (
    SELECT
      MIN(time)::DATE AS date
    FROM
      courier_actions
    GROUP BY
      courier_id
  ),

  couriers_counts_by_date AS (
    SELECT
      date,
      COUNT(*) new_couriers
    FROM
      couriers_min_dates
    GROUP BY
      date
  )

SELECT
  date,
  new_users,
  new_couriers,
  (SUM(new_users) OVER(ORDER BY date))::INTEGER total_users,
  (SUM(new_couriers) OVER(ORDER BY date))::INTEGER total_couriers
FROM
  users_counts_by_date u
  INNER JOIN couriers_counts_by_date USING(date)


1.2
WITH
  users_min_dates AS (
    SELECT
      MIN(time)::DATE AS date
    FROM
      user_actions
    GROUP BY
      user_id
  ),

  users_counts_by_date AS (
    SELECT
      date,
      COUNT(*) new_users
    FROM
      users_min_dates
    GROUP BY
      date
  ),

  couriers_min_dates AS (
    SELECT
      MIN(time)::DATE AS date
    FROM
      courier_actions
    GROUP BY
      courier_id
  ),

  couriers_counts_by_date AS (
    SELECT
      date,
      COUNT(*) new_couriers
    FROM
      couriers_min_dates
    GROUP BY
      date
  ),

  amount_table AS (
    SELECT
      date,
      new_users,
      new_couriers,
      (SUM(new_users) OVER(ORDER BY date))::INTEGER total_users,
      (SUM(new_couriers) OVER(ORDER BY date))::INTEGER total_couriers
    FROM
      users_counts_by_date u
      INNER JOIN couriers_counts_by_date USING(date)
  )

SELECT
  date,
  new_users,
  new_couriers,
  total_users,
  total_couriers,
  ROUND(100.0 * (new_users - LAG(new_users) OVER()) / LAG(new_users) OVER(), 2) new_users_change,
  ROUND(100.0 * (new_couriers - LAG(new_couriers) OVER()) / LAG(new_couriers) OVER(), 2) new_couriers_change,
  ROUND(100.0 * (total_users - LAG(total_users) OVER()) / LAG(total_users) OVER(), 2) total_users_growth,
  ROUND(100.0 * (total_couriers - LAG(total_couriers) OVER()) / LAG(total_couriers) OVER(), 2) total_couriers_growth
FROM
  amount_table


1.3
/*
Если курьер вышел на смену 24/08, принял заказ в 23:50,
доставил его в 0:10, то активным он считается и 24/08, **и** 25/08.
*/
WITH
  users_min_dates AS (
    SELECT
      MIN(time)::DATE AS date
    FROM
      user_actions
    GROUP BY
      user_id
  ),

  users_counts_by_date AS (
    SELECT
      date,
      COUNT(*) new_users
    FROM
      users_min_dates
    GROUP BY
      date
  ),

  couriers_min_dates AS (
    SELECT
      MIN(time)::DATE AS date
    FROM
      courier_actions
    GROUP BY
      courier_id
  ),

  couriers_counts_by_date AS (
    SELECT
      date,
      COUNT(*) new_couriers
    FROM
      couriers_min_dates
    GROUP BY
      date
  ),

  amount_table AS (
    SELECT
      date,
      (SUM(new_users) OVER(ORDER BY date))::INTEGER total_users,
      (SUM(new_couriers) OVER(ORDER BY date))::INTEGER total_couriers
    FROM
      users_counts_by_date u
      INNER JOIN couriers_counts_by_date USING(date)
  ),

  paying_users_number AS (
    SELECT
      time:: DATE date,
      COUNT(DISTINCT user_id) paying_users
    FROM
      user_actions
    WHERE
      order_id NOT IN (SELECT order_id FROM user_actions WHERE action='cancel_order')
    GROUP BY
      1),

  active_couriers_number AS (
    SELECT
      time:: DATE date,
      COUNT(DISTINCT courier_id) active_couriers
    FROM
      courier_actions
    WHERE
      order_id IN (SELECT order_id FROM courier_actions WHERE action='deliver_order')
      AND action='accept_order'
    GROUP BY
      1)


SELECT
  date,
  paying_users,
  active_couriers,
  ROUND(100.0 * paying_users / total_users, 2) paying_users_share,
  ROUND(100.0 * active_couriers / total_couriers, 2) active_couriers_share
FROM
  paying_users_number
  FULL JOIN active_couriers_number USING(date)
  FULL JOIN amount_table USING(date)


1.4
WITH
  users_orders AS (
    SELECT
      time::DATE date,
      user_id,
      COUNT(*) today_amount
    FROM
      user_actions
    WHERE
      order_id NOT IN (SELECT order_id FROM user_actions WHERE action='cancel_order')
      and action = 'create_order'
    GROUP BY
      date,
      user_id)

SELECT
  date,
  ROUND(100.0 * COUNT(*) FILTER(WHERE today_amount = 1) / COUNT(*), 2) single_order_users_share,
  ROUND(100.0 * COUNT(*) FILTER(WHERE today_amount > 1) / COUNT(*), 2) several_orders_users_share
FROM
  users_orders
GROUP BY
  date
ORDER BY
  date


1.5
/*
"Во всех случаях при расчёте числа **заказов** учитывайте **только**...",
но это указание не касается подсчета числа **новых пользователей**.
*/
WITH
  users_first_order_date AS (
    SELECT
      user_id,
      MIN(time)::DATE AS date
    FROM
      user_actions
    WHERE
       order_id NOT IN (SELECT order_id FROM user_actions WHERE action='cancel_order')
    GROUP BY
      user_id
  ),

  users_first_date AS (
    SELECT
      user_id,
      MIN(time)::DATE AS date
    FROM
      user_actions
    GROUP BY
      user_id
  ),

  users_order_counter AS (
    SELECT
      time::DATE AS date,
      user_id,
      COUNT(*) amount
    FROM
      user_actions
    WHERE
      order_id NOT IN (SELECT order_id FROM user_actions WHERE action='cancel_order')
          AND action = 'create_order'
    GROUP BY
      date,
      user_id
  ),

  first_amounts AS (
    SELECT
      date,
      SUM(amount)::INTEGER orders,
      (COUNT(*) FILTER(WHERE (user_id, date) IN (SELECT * FROM users_first_order_date)))::INTEGER first_orders,
      (SUM(amount) FILTER(WHERE (user_id, date) IN (SELECT * FROM users_first_date)))::INTEGER new_users_orders
    FROM
      users_order_counter
    GROUP BY
      date
      )

SELECT
  date,
  orders,
  first_orders,
  new_users_orders,
  ROUND(100.0 * first_orders / orders, 2) first_orders_share,
  ROUND(100.0 * new_users_orders / orders, 2) new_users_orders_share
FROM
  first_amounts
ORDER BY
  date


1.6
WITH
  users_data AS (
    SELECT
      time::DATE AS date,
      COUNT(DISTINCT user_id) paying_users,
      COUNT(DISTINCT order_id) orders_amount
    FROM
      user_actions
    WHERE
      order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
    GROUP BY
      date
  ),

  couriers_activity AS (
    SELECT
      time::DATE AS date,
      COUNT(DISTINCT courier_id) active_users
    FROM
      courier_actions
    WHERE
      order_id IN (SELECT order_id FROM courier_actions WHERE action = 'deliver_order')
    GROUP BY
      date
  )


SELECT
  date,
  ROUND(1.0 * paying_users / active_users, 2) users_per_courier,
  ROUND(1.0 * orders_amount / active_users, 2) orders_per_courier
FROM
  users_data
  INNER JOIN couriers_activity USING(date)


1.7
WITH
  times_to_deliver AS (
    SELECT
      order_id,
      EXTRACT(epoch FROM time - LAG(time) OVER(PARTITION BY order_id ORDER BY time)) / 60 time_to_deliver,
      action,
      time
    FROM
      courier_actions
    WHERE
      order_id IN (SELECT order_id FROM courier_actions WHERE action='deliver_order')
)


SELECT
  time::DATE as date,
  ROUND(AVG(time_to_deliver)) minutes_to_deliver
FROM
  times_to_deliver
WHERE
  action='deliver_order'
GROUP BY
  time::DATE


1.7-2
WITH
  times_to_deliver AS (
    SELECT
      order_id,
      EXTRACT(epoch FROM MAX(time) - MIN(time)) / 60 time_to_deliver,
      MAX(time)::DATE date
    FROM
      courier_actions
    WHERE
      order_id IN (SELECT order_id FROM courier_actions WHERE action='deliver_order')
    GROUP BY
      order_id
)


SELECT
  date,
  ROUND(AVG(time_to_deliver))::INT minutes_to_deliver
FROM
  times_to_deliver
GROUP BY
  date
ORDER BY
  date


1.8
WITH
  amounts AS (
    SELECT
      DATE_PART('hour', creation_time)::INT AS hour,
      COUNT(*) FILTER (WHERE order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')) successful_orders,
      COUNT(*) FILTER (WHERE order_id IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')) canceled_orders
    FROM
      orders
    GROUP BY
      hour
  )

SELECT
  *,
  ROUND(1.0 * canceled_orders / (canceled_orders + successful_orders), 3) cancel_rate
FROM
  amounts
ORDER BY
  hour

------------------------

2.1
WITH
    splited_orders AS(
        SELECT
            order_id,
            creation_time,
            UNNEST (product_ids) product_id
        FROM
            orders
        WHERE
            NOT EXISTS (SELECT *
                        FROM user_actions
                        WHERE action = 'cancel_order'
                                AND orders.order_id = user_actions.order_id)
    ),

    order_sums AS (
        SELECT
            creation_time::DATE date,
            SUM(price) revenue
        FROM
            splited_orders so
            INNER JOIN products p ON so.product_id = p.product_id
        GROUP BY
            date
    )

SELECT
    date,
    revenue,
    SUM(revenue) OVER(ORDER BY date) total_revenue,
    ROUND(100.0 * (revenue - LAG(revenue, 1) OVER()) / LAG(revenue, 1) OVER(), 2) AS revenue_change
FROM
    order_sums


2.2
WITH
    splited_orders AS(
        SELECT
            order_id,
            creation_time,
            UNNEST (product_ids) product_id
        FROM
            orders
        WHERE
            NOT EXISTS (SELECT *
                        FROM user_actions
                        WHERE action = 'cancel_order'
                                AND orders.order_id = user_actions.order_id)
    ),

    order_sums AS (
        SELECT
            creation_time::DATE date,
            SUM(price) revenue
        FROM
            splited_orders so
            LEFT JOIN products p ON so.product_id = p.product_id
        GROUP BY
            date
    ),

    counter AS (
        SELECT
            time::DATE date,
            COUNT(DISTINCT user_id) active_users,
            COUNT(DISTINCT user_id) FILTER(WHERE NOT EXISTS
                    (SELECT * FROM user_actions ua2
                    WHERE ua1.order_id = ua2.order_id
                    AND action = 'cancel_order')) paying_users,
            COUNT(DISTINCT order_id) FILTER(WHERE NOT EXISTS
                    (SELECT * FROM user_actions ua2
                    WHERE ua1.order_id = ua2.order_id
                    AND action = 'cancel_order')) order_count
        FROM
            user_actions ua1
        GROUP BY
            date
    )

SELECT
    date,
    ROUND(revenue / active_users, 2) arpu,
    ROUND(revenue / paying_users, 2) arppu,
    ROUND(revenue / order_count, 2) aov
FROM
    order_sums
    INNER JOIN counter USING (date)


2.3
/*
В подсказках  спрятано:
"Для каждого пользователя посчитайте среднюю стоимость всех его заказов.
Затем еще раз усредните полученные значения по рекламным каналам"
*/
WITH
    splited_orders AS(
        SELECT
            order_id,
            creation_time,
            UNNEST (product_ids) product_id
        FROM
            orders
        WHERE NOT EXISTS (SELECT * FROM user_actions
                            WHERE action = 'cancel_order'
                            AND orders.order_id = user_actions.order_id)
    ),

    order_sums AS (
        SELECT
            creation_time::DATE date,
            SUM(price) revenue
        FROM
            splited_orders so
            LEFT JOIN products p ON so.product_id = p.product_id
        GROUP BY
            date
    ),

    users_first_order_date AS (
        SELECT
            user_id,
            MIN(time)::DATE AS date
        FROM
            user_actions ua1
        WHERE NOT EXISTS (SELECT * FROM user_actions ua2
                            WHERE ua1.order_id = ua2.order_id
                            AND action = 'cancel_order')
        GROUP BY
            user_id
    ),

    paying_user_count AS (
        SELECT
            date,
            COUNT(DISTINCT user_id) paying_users
        FROM
            users_first_order_date
        GROUP BY
            date
    ),

    users_first_date AS (
        SELECT
            user_id,
            MIN(time)::DATE AS date
        FROM
            user_actions
        GROUP BY
            user_id
    ),

    active_user_count AS (
        SELECT
            date,
            COUNT(DISTINCT user_id) active_users
        FROM
            users_first_date
        GROUP BY
            date
    ),

    order_counter AS (
        SELECT
            time::DATE date,
            COUNT(DISTINCT order_id) order_count
        FROM
            user_actions ua1
        WHERE NOT EXISTS (SELECT * FROM user_actions ua2
                            WHERE ua1.order_id = ua2.order_id
                            AND action = 'cancel_order')
        GROUP BY
            date
    )


SELECT
    date,
    ROUND(SUM(revenue) OVER(ORDER BY date) / SUM(active_users) OVER(ORDER BY date), 2) running_arpu,
    ROUND(SUM(revenue) OVER(ORDER BY date) / SUM(paying_users) OVER(ORDER BY date), 2) running_arppu,
    ROUND(SUM(revenue) OVER(ORDER BY date) / SUM(order_count) OVER(ORDER BY date), 2) running_aov
FROM
    order_sums
    INNER JOIN paying_user_count USING (date)
    INNER JOIN active_user_count USING (date)
    INNER JOIN order_counter USING (date)


2.4
/*
Фильтрация времени до 8-го числа включительно.

Считаем сразу днями недель, а не сутками - юзеры же могут дублироваться 1-го и 8-го.
Юзер, тарившийся 7 дней подряд, должен "попасть" в каждую строку нашего ответа.
*/
WITH
    splited_orders AS(
        SELECT
            order_id,
            creation_time,
            UNNEST (product_ids) product_id
        FROM
            orders
        WHERE
            NOT EXISTS (SELECT *
                        FROM user_actions
                        WHERE action = 'cancel_order'
                                AND orders.order_id = user_actions.order_id)
            AND creation_time BETWEEN '2022-08-26' AND '2022-09-09'
    ),

    order_sums AS (
        SELECT
            TO_CHAR(creation_time, 'Day') weekday,
            DATE_PART('isodow', creation_time) weekday_number,
            SUM(price) revenue
        FROM
            splited_orders so
            LEFT JOIN products p ON so.product_id = p.product_id
        GROUP BY
            weekday, weekday_number
    ),

    counter AS (
        SELECT
            TO_CHAR(time, 'Day') weekday,
            DATE_PART('isodow', time) weekday_number,
            COUNT(DISTINCT user_id) active_users,
            COUNT(DISTINCT user_id)
                    FILTER(WHERE NOT EXISTS
                    (SELECT * FROM user_actions ua2
                    WHERE ua1.order_id = ua2.order_id
                    AND action = 'cancel_order')) paying_users,
            COUNT(DISTINCT order_id)
                    FILTER(WHERE NOT EXISTS
                    (SELECT * FROM user_actions ua2
                    WHERE ua1.order_id = ua2.order_id
                    AND action = 'cancel_order')) order_count
        FROM
            user_actions ua1
        WHERE
            time BETWEEN '2022-08-26' AND '2022-09-09'
        GROUP BY
            weekday, weekday_number
    )

SELECT
    weekday,
    weekday_number,
    ROUND(revenue / active_users, 2) arpu,
    ROUND(revenue / paying_users, 2) arppu,
    ROUND(revenue / order_count, 2) aov
FROM
    order_sums
    INNER JOIN counter USING (weekday, weekday_number)
ORDER BY
    weekday_number


2.5
with
    splited_orders as(
        SELECT
            order_id,
            user_id,
            creation_time::date date,
            unnest (product_ids) product_id
        FROM
            orders
            LEFT JOIN user_actions using(order_id)
        WHERE
            not exists (SELECT *
                        FROM   user_actions
                        WHERE  action = 'cancel_order'
                                and orders.order_id = user_actions.order_id)
    ),

    users_first_date as (
        SELECT DISTINCT
            user_id,
            min(time)::date as first_date
        FROM
            user_actions
        GROUP BY
            user_id
    ),

    order_sums as (
        SELECT
            date,
            sum(price) revenue,
            sum(price) filter(WHERE (so.user_id, so.date) in (SELECT user_id, first_date FROM users_first_date)) new_users_revenue
        FROM
            splited_orders so
            LEFT JOIN products p ON so.product_id = p.product_id
        GROUP BY date
)

SELECT
    date,
    revenue,
    new_users_revenue,
    round(100 * new_users_revenue / revenue, 2) new_users_revenue_share,
    round(100 * (revenue - new_users_revenue) / revenue, 2) old_users_revenue_share
FROM
    order_sums
ORDER BY
    date


2.6
/*
Долю в "ДРУГОЕ" получаем суммированием округленных долей "редких" товаров,
а не полным пересчетом этой доли
*/
WITH
    splited_orders as (
        SELECT
            unnest (product_ids) product_id
        FROM
            orders
        WHERE
            not exists (SELECT *
                        FROM user_actions
                        WHERE  action = 'cancel_order'
                                and orders.order_id = user_actions.order_id)
        ),

    total(total_sum) as (
        SELECT
            sum(price)
        FROM
            splited_orders
            LEFT JOIN products using (product_id)
    ),

    product_sums as (
        SELECT
            name product_name,
            sum(price) revenue,
            round(100.0 * sum(price) / total_sum, 2) share_in_revenue
        FROM
            splited_orders
            LEFT JOIN products using (product_id)
            CROSS JOIN total
        GROUP BY
            product_name,
            total_sum
    ),

    product_sums_with_others as (
        SELECT
            CASE
                WHEN share_in_revenue < 0.5 THEN 'ДРУГОЕ'
                ELSE product_name
                END as product_name,
            revenue,
            share_in_revenue
        FROM
            product_sums
    )

SELECT
    product_name,
    sum(revenue) revenue,
    sum(share_in_revenue) share_in_revenue
FROM
    product_sums_with_others
GROUP BY
    product_name
ORDER BY
    revenue desc


2.7
/*
Цены нам даны с НДС. Значит: НДС =  цена / 1.2 * 0.2 или НДС =  цена / 1.1 * 0.1
*/
WITH
    product_prices_and_vat as (
        SELECT
            product_id,
            price,
            CASE
                WHEN name IN ('сахар', 'сухарики', 'сушки', 'семечки',
                                'масло льняное', 'виноград', 'масло оливковое',
                                'арбуз', 'батон', 'йогурт', 'сливки', 'гречка',
                                'овсянка', 'макароны', 'баранина', 'апельсины',
                                'бублики', 'хлеб', 'горох', 'сметана', 'рыба копченая',
                                'мука', 'шпроты', 'сосиски', 'свинина', 'рис',
                                'масло кунжутное', 'сгущенка', 'ананас', 'говядина',
                                'соль', 'рыба вяленая', 'масло подсолнечное', 'яблоки',
                                'груши', 'лепешка', 'молоко', 'курица', 'лаваш', 'вафли',
                                'мандарины')
                THEN ROUND(price / 1.1 * 0.1, 2)
                ELSE ROUND(price / 1.2 * 0.2, 2)
                END as vat
        FROM
            products
    ),

    splited_orders as (
        SELECT
            creation_time::date date,
            order_id,
            unnest (product_ids) product_id
        FROM
            orders
        WHERE
            not exists (SELECT *
                        FROM user_actions
                        WHERE  action = 'cancel_order'
                                and orders.order_id = user_actions.order_id)
    ),

    access_sums as (
        SELECT
            date,
            sum(price) total,
            sum(vat) total_vat,
            CASE
                WHEN date < '2022-09-01' THEN COUNT(DISTINCT order_id) * 140
                ELSE COUNT(DISTINCT order_id) * 115
                END as assembly_costs,
            CASE
                WHEN date < '2022-09-01' THEN 120000
                ELSE 150000
                END as rental_costs
        FROM
            splited_orders
            LEFT JOIN product_prices_and_vat using (product_id)
        GROUP BY
            date
    ),

    delivery_by_working_shift as (
        SELECT
            time::date date,
            COUNT(order_id) delivered_orders
        FROM
            courier_actions
        WHERE
            action = 'deliver_order'
        GROUP BY
            date,
            courier_id
    ),

    delivery_costs as (
        SELECT
            date,
            SUM(delivered_orders) * 150 as delivery_cost
        FROM
            delivery_by_working_shift
        GROUP BY
            date
    ),

    delivery_bonuses as (
        SELECT
            date,
            CASE
                WHEN date < '2022-09-01' THEN COUNT(delivered_orders) * 400
                ELSE COUNT(delivered_orders) * 500
                END as delivery_bonus
        FROM
            delivery_by_working_shift
        WHERE
            delivered_orders > 4
        GROUP BY
            date
    ),

    sum_metrics as (
        SELECT
            date,
            total as revenue,
            assembly_costs + rental_costs + delivery_cost + coalesce(delivery_bonus, 0) as costs,
            total_vat as tax
        FROM
            access_sums
            LEFT JOIN delivery_costs USING (date)
            LEFT JOIN delivery_bonuses USING (date)
    ),

    rolling_metrics as (
        SELECT
            date,
            revenue,
            costs,
            tax,
            revenue - costs - tax as gross_profit,
            SUM(revenue) OVER(ORDER BY date) as total_revenue,
            SUM(costs) OVER(ORDER BY date) as total_costs,
            SUM(tax) OVER(ORDER BY date) as total_tax,
            SUM(revenue - costs - tax) OVER(ORDER BY date) as total_gross_profit
        FROM
            sum_metrics
    )

SELECT
    date,
    revenue,
    costs,
    tax,
    gross_profit,
    total_revenue,
    total_costs,
    total_tax,
    total_gross_profit,
    ROUND(100 * gross_profit / revenue, 2) as gross_profit_ratio,
    ROUND(100 * total_gross_profit / total_revenue, 2) as total_gross_profit_ratio
FROM
    rolling_metrics
ORDER BY
    date


2mm. Заготовка campaign_users
WITH
    campaign_users as(
        SELECT
            DISTINCT UNNEST(
                ARRAY[
                    8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051
                ]
            ) user_id,
            'Кампания № 1' ads_campaign

        UNION ALL

        SELECT
            DISTINCT UNNEST(
                ARRAY[
                    9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                    8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                    9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                    9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                    9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                    9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                    9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                    9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                    9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                    9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                    9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                    9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                    9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                    8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                    8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                    9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                    9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                    9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                    9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                    9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712
                ]
            ),
            'Кампания № 2'
    )

SELECT * FROM campaign_users

2mm.1
SELECT
    'Кампания № 1' as ads_campaign,
    ROUND(250000.0 / COUNT(DISTINCT user_id), 2) as cac
FROM
    user_actions
WHERE
    user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051)
    and order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')

UNION

SELECT
    'Кампания № 2' as ads_campaign,
    ROUND(250000.0 / COUNT(DISTINCT user_id), 2) as cac
FROM
    user_actions
WHERE
    user_id IN (9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
    and order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')


2mm.1-2
WITH
    campaign_users as(
        SELECT
            DISTINCT UNNEST(
                ARRAY[
                    8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051
                ]
            ) user_id,
            'Кампания № 1' ads_campaign

        UNION ALL

        SELECT
            DISTINCT UNNEST(
                ARRAY[
                    9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                    8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                    9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                    9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                    9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                    9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                    9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                    9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                    9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                    9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                    9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                    9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                    9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                    8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                    8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                    9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                    9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                    9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                    9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                    9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712
                ]
            ),
            'Кампания № 2'
    )

SELECT
    ads_campaign,
    ROUND(250000.0 / COUNT(DISTINCT ua1.user_id), 2) as cac
FROM
    user_actions ua1
    INNER JOIN campaign_users cu
    ON ua1.user_id = cu.user_id
        and not exists (SELECT *
                        FROM user_actions ua2
                        WHERE action = 'cancel_order'
                                and ua1.order_id = ua2.order_id)
GROUP BY
    ads_campaign


2mm.1-3
WITH
    campaign_users as(
        SELECT
            UNNEST(
                ARRAY[
                    8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051
                ]
            ) user_id,
            'Кампания № 1' ads_campaign

        UNION ALL

        SELECT
            UNNEST(
                ARRAY[
                    9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                    8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                    9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                    9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                    9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                    9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                    9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                    9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                    9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                    9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                    9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                    9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                    9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                    8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                    8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                    9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                    9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                    9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                    9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                    9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712
                ]
            ),
            'Кампания № 2'
    ),

    not_canceled_orders AS (
        SELECT
            order_id
        FROM
            user_actions ua1
        WHERE
            NOT EXISTS (SELECT order_id FROM user_actions ua2 WHERE ua2.action = 'cancel_order' and ua1.order_id = ua2.order_id)
    )

SELECT
    ads_campaign,
    ROUND(250000.0 / COUNT(DISTINCT user_id), 2) as cac
FROM
    user_actions
    INNER JOIN campaign_users USING (user_id)
    INNER JOIN not_canceled_orders USING (order_id)
GROUP BY
    ads_campaign


2mm.2
WITH
    campaign_user_actions as(
        SELECT
            CASE
                WHEN user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051)
                THEN 'Кампания № 1'
                WHEN user_id IN (9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                                    8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                                    9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                                    9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                                    9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                                    9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                                    9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                                    9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                                    9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                                    9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                                    9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                                    9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                                    9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                                    8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                                    8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                                    9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                                    9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                                    9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                                    9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                                    9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
                THEN 'Кампания № 2'
                END as ads_campaign,
            *
        FROM
            user_actions ua1
        WHERE
            not exists (SELECT *
                        FROM user_actions ua2
                        WHERE action = 'cancel_order'
                                and ua1.order_id = ua2.order_id)
            and time > '2022-09-01'
            and user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                            8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                            10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                            8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                            8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                            8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                            9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                            8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                            9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                            9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                            9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                            9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                            9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                            9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                            9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051,
                            9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                            8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                            9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                            9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                            9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                            9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                            9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                            9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                            9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                            9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                            9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                            9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                            9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                            8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                            8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                            9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                            9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                            9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                            9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                            9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
    ),

    splited_orders as(
        SELECT
            ads_campaign,
            unnest (product_ids) product_id
        FROM
            orders
            JOIN campaign_user_actions using(order_id)
    )


SELECT
    ads_campaign,
    round(100 * (sum(price) - 250000) / 250000, 2) as roi
FROM
    splited_orders so
    LEFT JOIN products p USING(product_id)
GROUP BY
    ads_campaign
ORDER BY
    roi desc


2mm.2-2
WITH
    campaign_users as(
        SELECT
            DISTINCT UNNEST(
                ARRAY[
                    8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051
                ]
            ) user_id,
            'Кампания № 1' ads_campaign

        UNION ALL

        SELECT
            DISTINCT UNNEST(
                ARRAY[
                    9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                    8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                    9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                    9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                    9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                    9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                    9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                    9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                    9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                    9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                    9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                    9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                    9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                    8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                    8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                    9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                    9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                    9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                    9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                    9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712
                ]
            ),
            'Кампания № 2'
    ),

    not_canceled_orders AS (
        SELECT
            order_id
        FROM
            user_actions ua1
        WHERE
            NOT EXISTS (SELECT order_id FROM user_actions ua2 WHERE action = 'cancel_order' and ua1.order_id = ua2.order_id)
    ),

    splited_orders as(
        SELECT
            ads_campaign,
            unnest (product_ids) product_id
        FROM
            user_actions
            INNER JOIN campaign_users USING (user_id)
            INNER JOIN not_canceled_orders USING (order_id)
            INNER JOIN orders USING (order_id)
    )

SELECT
    ads_campaign,
    sum(price),
    round(100 * (sum(price) - 250000) / 250000, 2) as roi
FROM
    splited_orders so
    LEFT JOIN products p USING(product_id)
GROUP BY
    ads_campaign
ORDER BY
    roi desc


2mm.3
WITH
    campaign_user_actions as(
        SELECT
            CASE
                WHEN user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051)
                THEN 'Кампания № 1'
                WHEN user_id IN (9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                                    8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                                    9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                                    9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                                    9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                                    9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                                    9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                                    9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                                    9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                                    9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                                    9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                                    9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                                    9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                                    8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                                    8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                                    9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                                    9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                                    9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                                    9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                                    9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
                THEN 'Кампания № 2'
                END as ads_campaign,
            *
        FROM
            user_actions ua1
        WHERE
            not exists (SELECT *
                        FROM user_actions ua2
                        WHERE action = 'cancel_order'
                                and ua1.order_id = ua2.order_id)
            and time between '2022-09-01'and '2022-09-08'
            and user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                            8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                            10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                            8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                            8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                            8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                            9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                            8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                            9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                            9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                            9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                            9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                            9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                            9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                            9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051,
                            9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                            8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                            9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                            9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                            9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                            9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                            9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                            9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                            9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                            9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                            9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                            9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                            9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                            8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                            8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                            9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                            9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                            9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                            9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                            9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
    ),

    splited_orders as(
        SELECT
            ads_campaign,
            user_id,
            order_id,
            unnest (product_ids) product_id
        FROM
            orders
            JOIN campaign_user_actions using(order_id)
    ),

    avg_user_checks as (
        SELECT
            ads_campaign,
            sum(price) / count(distinct order_id) avg_user_check
        FROM
            splited_orders so
            LEFT JOIN products p USING(product_id)
        GROUP BY
            ads_campaign, user_id
    )

SELECT
    ads_campaign,
    round(avg(avg_user_check), 2) avg_check
FROM
    avg_user_checks
GROUP BY
    ads_campaign
ORDER BY
    avg_check desc


2mm.3-2
WITH
    campaign_1_users as(
        SELECT
            UNNEST(ARRAY[
                8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051
            ])
    ),

    campaign_2_users as(
        SELECT
            UNNEST(ARRAY[
                9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712
            ])
    ),

    campaign_user_actions as(
        SELECT
            CASE
                WHEN user_id IN (SELECT DISTINCT * FROM campaign_1_users)
                THEN 'Кампания № 1'
                WHEN user_id IN (SELECT DISTINCT * FROM campaign_2_users)
                THEN 'Кампания № 2'
                END as ads_campaign,
            *
        FROM
            user_actions ua1
        WHERE
            not exists (SELECT *
                        FROM user_actions ua2
                        WHERE action = 'cancel_order'
                                and ua1.order_id = ua2.order_id)
            and time between '2022-09-01'and '2022-09-08'
            and user_id IN (
                            SELECT DISTINCT * FROM campaign_1_users
                            UNION
                            SELECT DISTINCT * FROM campaign_2_users
                        )
    ),

    splited_orders as(
        SELECT
            ads_campaign,
            user_id,
            order_id,
            unnest (product_ids) product_id
        FROM
            orders
            JOIN campaign_user_actions using(order_id)
    ),

    avg_user_checks as (
        SELECT
            ads_campaign,
            sum(price) / count(distinct order_id) avg_user_check
        FROM
            splited_orders so
            LEFT JOIN products p USING(product_id)
        GROUP BY
            ads_campaign, user_id
    )

SELECT
    ads_campaign,
    round(avg(avg_user_check), 2) avg_check
FROM
    avg_user_checks
GROUP BY
    ads_campaign
ORDER BY
    avg_check desc


2mm.4
WITH
    start_days as (
        SELECT
            user_id,
            time::date dt,
            (min(time) OVER(PARTITION BY user_id))::DATE start_date
        FROM
            user_actions
    )

SELECT
    date_trunc('month', start_date)::date start_month,
    start_date,
    dt - start_date day_number,
    round(count(distinct user_id)::decimal / max(count(distinct user_id)) OVER(PARTITION BY start_date), 2) retention
FROM
    start_days
GROUP BY
    start_month,
    start_date,
    day_number


2mm.5
WITH
    start_days as (
        SELECT
            user_id,
            time::date dt,
            (min(time) OVER(PARTITION BY user_id))::DATE start_date
        FROM
            user_actions
        WHERE
            user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                            8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                            10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                            8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                            8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                            8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                            9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                            8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                            9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                            9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                            9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                            9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                            9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                            9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                            9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051,
                            9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                            8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                            9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                            9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                            9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                            9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                            9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                            9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                            9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                            9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                            9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                            9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                            9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                            8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                            8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                            9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                            9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                            9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                            9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                            9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)

    ),

    campaign_data as (
        SELECT
            CASE
                WHEN user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051)
                THEN 'Кампания № 1'
                WHEN user_id IN (9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                                    8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                                    9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                                    9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                                    9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                                    9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                                    9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                                    9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                                    9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                                    9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                                    9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                                    9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                                    9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                                    8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                                    8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                                    9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                                    9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                                    9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                                    9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                                    9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
                THEN 'Кампания № 2'
                END as ads_campaign,
            user_id,
            start_date,
            dt - start_date day_number
        FROM
            start_days
    )

SELECT
    ads_campaign,
    start_date,
    day_number,
    round(count(distinct user_id)::decimal / max(count(distinct user_id)) OVER(PARTITION BY ads_campaign, start_date), 2) retention
FROM
    campaign_data
GROUP BY
    ads_campaign,
    start_date,
    day_number
HAVING
    day_number IN (0, 1, 7)


2mm.6
/*
"для каждого дня число покупателей в когорте будет оставаться **неизменным**".
Нам надо посчитать всех тех, кто рано или поздно за эти дни "успешно" сделает заказ
и использовать это число с первого дня.
Некоторые могут проявить "активность" (сделать заказ),
но так ни разу и не сделать "успешного" заказа (отменят все свои заказы).
*/
WITH
    cacs as (
        SELECT
            'Кампания № 1' as ads_campaign,
            ROUND(250000.0 / COUNT(DISTINCT user_id), 2) as cac
        FROM
            user_actions
        WHERE
            user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                            8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                            10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                            8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                            8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                            8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                            9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                            8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                            9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                            9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                            9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                            9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                            9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                            9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                            9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051)
            and order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')

        UNION

        SELECT
            'Кампания № 2' as ads_campaign,
            ROUND(250000.0 / COUNT(DISTINCT user_id), 2) as cac
        FROM
            user_actions
        WHERE
            user_id IN (9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                        8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                        9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                        9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                        9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                        9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                        9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                        9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                        9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                        9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                        9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                        9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                        9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                        8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                        8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                        9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                        9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                        9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                        9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                        9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
            and order_id not IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')
    ),

    splited_orders as (
        SELECT
            order_id,
            creation_time,
            UNNEST (product_ids) product_id
        FROM
            orders
        WHERE
            not EXISTS (SELECT * FROM user_actions
                            WHERE action = 'cancel_order' and orders.order_id = user_actions.order_id)
    ),

    order_sums as (
        SELECT
            CASE
                WHEN user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051)
                THEN 'Кампания № 1'
                WHEN user_id IN (9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                                    8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                                    9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                                    9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                                    9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                                    9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                                    9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                                    9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                                    9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                                    9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                                    9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                                    9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                                    9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                                    8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                                    8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                                    9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                                    9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                                    9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                                    9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                                    9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
                THEN 'Кампания № 2'
                END as ads_campaign,
            creation_time::DATE date,
            SUM(price) revenue
        FROM
            splited_orders so
            LEFT JOIN products p ON so.product_id = p.product_id
            LEFT JOIN user_actions USING (order_id)
        WHERE
            user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                        8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                        10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                        8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                        8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                        8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                        9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                        8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                        9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                        9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                        9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                        9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                        9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                        9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                        9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051,
                        9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                        8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                        9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                        9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                        9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                        9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                        9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                        9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                        9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                        9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                        9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                        9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                        9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                        8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                        8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                        9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                        9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                        9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                        9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                        9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
        GROUP BY
            ads_campaign,
            date
    ),

    paying_user_count as (
        SELECT
            CASE
                WHEN user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051)
                THEN 'Кампания № 1'
                WHEN user_id IN (9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                                    8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                                    9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                                    9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                                    9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                                    9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                                    9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                                    9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                                    9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                                    9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                                    9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                                    9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                                    9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                                    8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                                    8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                                    9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                                    9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                                    9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                                    9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                                    9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
                THEN 'Кампания № 2'
                END as ads_campaign,
            COUNT(DISTINCT user_id) campaign_user_count
        FROM
            user_actions ua1
        WHERE NOT EXISTS (SELECT * FROM user_actions ua2
                            WHERE ua1.order_id = ua2.order_id
                            AND action = 'cancel_order')
        GROUP BY
            ads_campaign
    )


SELECT
    ads_campaign,
    'Day ' || date - '2022-09-01' AS day,
    ROUND(SUM(revenue) OVER(PARTITION BY ads_campaign ORDER BY date) / campaign_user_count, 2) cumulative_arppu,
    cac
FROM
    order_sums
    LEFT JOIN paying_user_count USING (ads_campaign)
    LEFT JOIN cacs USING (ads_campaign)
WHERE
    ads_campaign IS NOT NULL
ORDER BY
    ads_campaign,
    date


2mm.6-2
WITH
    campaign_orders as (
        SELECT
            CASE
                WHEN user_id IN (8804, 9828, 9524, 9667, 9165, 10013, 9625, 8879, 9145, 8657, 8706, 9476, 9813,
                                    8940, 9971, 10122, 8732, 9689, 9198, 8896, 8815, 9689, 9075, 9071, 9528, 9896,
                                    10135, 9478, 9612, 8638, 10057, 9167, 9450, 9999, 9313, 9720, 9599, 9351, 8638,
                                    8752, 9998, 9431, 9660, 9004, 8632, 8896, 8750, 9605, 8867, 9535, 9494, 9762,
                                    8990, 9526, 9786, 9654, 9144, 9391, 10016, 8988, 9009, 9061, 9004, 9550, 8707,
                                    8788, 8988, 8853, 9836, 8810, 9916, 9660, 9677, 9896, 8933, 8828, 9108, 9180,
                                    9897, 9960, 9472, 9818, 9695, 9965, 10023, 8972, 9035, 8869, 9662, 9561, 9740,
                                    8723, 9146, 10103, 9963, 10103, 8715, 9167, 9313, 9679, 9251, 10001, 8867, 8707,
                                    9945, 9562, 10013, 9020, 9317, 9002, 9838, 9144, 8911, 9505, 9313, 10134, 9197,
                                    9398, 9652, 9999, 9210, 8741, 9963, 9422, 9778, 8815, 9512, 9794, 9019, 9287, 9561,
                                    9321, 9677, 10122, 8752, 9810, 9871, 9162, 8876, 9414, 10030, 9334, 9175, 9182,
                                    9451, 9257, 9321, 9531, 9655, 9845, 8883, 9993, 9804, 10105, 8774, 8631, 9081, 8845,
                                    9451, 9019, 8750, 8788, 9625, 9414, 10064, 9633, 9891, 8751, 8643, 9559, 8791, 9518,
                                    9968, 9726, 9036, 9085, 9603, 8909, 9454, 9739, 9223, 9420, 8830, 9615, 8859, 9887,
                                    9491, 8739, 8770, 9069, 9278, 9831, 9291, 9089, 8976, 9611, 10082, 8673, 9113, 10051)
                THEN 'Кампания № 1'
                WHEN user_id IN (9752, 9510, 8893, 9196, 10038, 9839, 9820, 9064, 9930, 9529, 9267, 9161, 9231,
                                    8953, 9863, 8878, 10078, 9370, 8675, 9961, 9007, 9207, 9539, 9335, 8700, 9598,
                                    9068, 9082, 8916, 10131, 9704, 9904, 9421, 9083, 9337, 9041, 8955, 10033, 9137,
                                    9539, 8855, 9117, 8771, 9226, 8733, 8851, 9749, 10027, 9757, 9788, 8646, 9567,
                                    9140, 9719, 10073, 9000, 8971, 9437, 9958, 8683, 9410, 10075, 8923, 9255, 8995,
                                    9343, 10059, 9082, 9267, 9929, 8670, 9570, 9281, 8795, 9082, 8814, 8795, 10067,
                                    9700, 9432, 9783, 10081, 9591, 8733, 9337, 9808, 9392, 9185, 8882, 8681, 8825,
                                    9692, 10048, 8682, 9631, 8942, 9910, 9428, 9500, 9527, 8655, 8890, 9000, 8827,
                                    9485, 9013, 9042, 10047, 8798, 9250, 8929, 9161, 9545, 9333, 9230, 9841, 8659,
                                    9181, 9880, 9983, 9538, 9483, 9557, 9883, 9901, 9103, 10110, 8827, 9530, 9310,
                                    9711, 9383, 9527, 8968, 8973, 9497, 9753, 8980, 8838, 9370, 8682, 8854, 8966,
                                    9658, 9939, 8704, 9281, 10113, 8697, 9149, 8870, 9959, 9127, 9203, 9635, 9273,
                                    9356, 10069, 9855, 8680, 9912, 8900, 9131, 10058, 9479, 9259, 9368, 9908, 9468,
                                    8902, 9292, 8742, 9672, 9564, 8949, 9404, 9183, 8913, 8694, 10092, 8771, 8805,
                                    8794, 9179, 9666, 9095, 9935, 9190, 9183, 9631, 9231, 9109, 9123, 8806, 9229,
                                    9741, 9303, 9303, 10045, 9744, 8665, 9843, 9634, 8812, 9684, 9616, 8660, 9498,
                                    9877, 9727, 9882, 8663, 9755, 8754, 9131, 9273, 9879, 9492, 9920, 9853, 8803,
                                    9711, 9885, 9560, 8886, 8644, 9636, 10073, 10106, 9859, 8943, 8849, 8629, 8729,
                                    9227, 9711, 9282, 9312, 8630, 9735, 9315, 9077, 8999, 8713, 10079, 9596, 8748,
                                    9327, 9790, 8719, 9706, 9289, 9047, 9495, 9558, 8650, 9784, 8935, 9764, 8712)
                THEN 'Кампания № 2'
                END as ads_campaign,
            user_id,
            order_id,
            time::DATE date
        FROM
            user_actions ua1
        WHERE
            NOT EXISTS (SELECT * FROM user_actions ua2
                        WHERE ua1.order_id = ua2.order_id
                        AND action = 'cancel_order')
    ),

    splited_orders as (
        SELECT
            ads_campaign,
            user_id,
            order_id,
            date,
            UNNEST (product_ids) product_id
        FROM
            campaign_orders
            LEFT JOIN orders USING (order_id)
        WHERE
            ads_campaign IS NOT NULL
    ),

    order_sums as (
        SELECT
            ads_campaign,
            date,
            SUM(price) revenue
        FROM
            splited_orders so
            LEFT JOIN products p USING (product_id)
        GROUP BY
            ads_campaign,
            date
    ),

    paying_user_counts as (
        SELECT
            ads_campaign,
            COUNT(DISTINCT user_id) paying_user_count
        FROM
            splited_orders
        GROUP BY
            ads_campaign
    )

SELECT
    ads_campaign,
    'Day ' || date - '2022-09-01' AS day,
    ROUND(SUM(revenue) OVER(PARTITION BY ads_campaign ORDER BY date) / paying_user_count, 2) cumulative_arppu,
    ROUND(250000.0 / paying_user_count, 2) cac
FROM
    order_sums
    LEFT JOIN paying_user_counts USING (ads_campaign)
WHERE
    ads_campaign IS NOT NULL
ORDER BY
    ads_campaign,
    date


----------------------------------------------------------------

Тестирование на курсе "Инженер данных"

https://lab.karpov.courses/learning/29/module/1334/lesson/12697/36704/178500/
SELECT
  group_id
FROM
  group_table
  LEFT JOIN student_table USING (group_id)
GROUP BY
  group_id
HAVING
  COUNT(distinct student_id) > 5
ORDER BY
  COUNT(distinct student_id)  desc,
  group_id


https://lab.karpov.courses/learning/29/module/1334/lesson/12697/36704/178501/
SELECT
  group_id
FROM
  group_table
  LEFT JOIN student_table USING (group_id)
GROUP BY
  group_id
HAVING
  COUNT(distinct student_id) < 30 and COUNT(distinct student_id) > 0
ORDER BY
  COUNT(distinct student_id),
  group_id


https://lab.karpov.courses/learning/29/module/1334/lesson/12697/36704/178532/
select
  student_name,
  course_name,
  mark
from
  (select
    student_name,
    course_name,
    mark,
    row_number() over (partition by course_name order by mark desc) mark_rank
  from
    marks ) t
where
  mark_rank < 6
order by
  course_name ,
  mark_rank

